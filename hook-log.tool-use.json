[
  {
    "timestamp": "2025-07-08T01:33:52.261Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "limit": 100
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
        "content": "interface BaseHookInput {\n    session_id: string;\n    transcript_path: string;\n    hook_event_name: string;\n}\nexport interface PreToolUseInput extends BaseHookInput {\n    hook_event_name: 'PreToolUse';\n    tool_name: string;\n    tool_input: Record<string, any>;\n}\nexport interface PostToolUseInput extends BaseHookInput {\n    hook_event_name: 'PostToolUse';\n    tool_name: string;\n    tool_input: Record<string, any>;\n    tool_response: Record<string, any>;\n}\nexport interface NotificationInput extends BaseHookInput {\n    hook_event_name: 'Notification';\n    message: string;\n}\nexport interface StopInput extends BaseHookInput {\n    hook_event_name: 'Stop';\n    stop_hook_active: boolean;\n}\nexport interface SubagentStopInput extends BaseHookInput {\n    hook_event_name: 'SubagentStop';\n    stop_hook_active: boolean;\n}\nexport type HookInput = PreToolUseInput | PostToolUseInput | NotificationInput | StopInput | SubagentStopInput;\ninterface BaseHookOutput {\n    continue?: boolean;\n    stopReason?: string;\n    suppressOutput?: boolean;\n}\nexport interface PreToolUseOutput extends BaseHookOutput {\n    decision?: 'approve' | 'block';\n    reason?: string;\n}\nexport interface PostToolUseOutput extends BaseHookOutput {\n    decision?: 'block';\n    reason?: string;\n}\nexport interface StopOutput extends BaseHookOutput {\n    decision?: 'block';\n    reason?: string;\n}\nexport type NotificationOutput = BaseHookOutput;\nexport type SubagentStopOutput = StopOutput;\nexport interface HookTypeMap {\n    PreToolUse: {\n        input: PreToolUseInput;\n        output: PreToolUseOutput;\n    };\n    PostToolUse: {\n        input: PostToolUseInput;\n        output: PostToolUseOutput;\n    };\n    Notification: {\n        input: NotificationInput;\n        output: NotificationOutput;\n    };\n    Stop: {\n        input: StopInput;\n        output: StopOutput;\n    };\n    SubagentStop: {\n        input: SubagentStopInput;\n        output: SubagentStopOutput;\n    };\n}\nexport type HookType = keyof HookTypeMap;\nexport type HookHandler<T extends HookType> = (input: HookTypeMap[T]['input']) => HookTypeMap[T]['output'] | void | Promise<HookTypeMap[T]['output'] | void>;\nexport interface ToolHookDefinition<T extends 'PreToolUse' | 'PostToolUse'> {\n    matcher: string;\n    handler: HookHandler<T>;\n}\nexport type NonToolHookDefinition<T extends HookType> = T extends Exclude<HookType, 'PreToolUse' | 'PostToolUse'> ? HookHandler<T> : never;\nexport type AnyHookDefinition<T extends HookType> = T extends 'PreToolUse' | 'PostToolUse' ? ToolHookDefinition<T> : NonToolHookDefinition<T>;\nexport declare enum ExitCode {\n    SUCCESS = 0,\n    ERROR = 1,\n    BLOCKING_ERROR = 2\n}\nexport interface HookCommand {\n    type: 'command';\n    command: string;\n    timeout?: number;\n}\nexport interface HookMatcher {\n    matcher?: string;\n    hooks: HookCommand[];\n}\nexport interface HookSettings {\n    hooks?: {\n        PreToolUse?: HookMatcher[];\n        PostToolUse?: HookMatcher[];\n        Notification?: HookMatcher[];\n        Stop?: HookMatcher[];\n        SubagentStop?: HookMatcher[];\n    };",
        "numLines": 100,
        "startLine": 1,
        "totalLines": 110
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:33:55.679Z",
    "event": "PreToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Edit",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/index.test.ts",
      "old_string": "      expect(mockLog).toHaveBeenCalledWith(\n        JSON.stringify({\n          PreToolUse: [],\n          PostToolUse: [],\n          Stop: false,\n          Notification: false,\n          SubagentStop: false\n        })\n      );",
      "new_string": "      const output = JSON.parse(mockLog.mock.calls[0][0]);\n      expect(output).toEqual({});"
    }
  },
  {
    "timestamp": "2025-07-08T01:33:56.443Z",
    "event": "PostToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Edit",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/index.test.ts",
      "old_string": "      expect(mockLog).toHaveBeenCalledWith(\n        JSON.stringify({\n          PreToolUse: [],\n          PostToolUse: [],\n          Stop: false,\n          Notification: false,\n          SubagentStop: false\n        })\n      );",
      "new_string": "      const output = JSON.parse(mockLog.mock.calls[0][0]);\n      expect(output).toEqual({});"
    },
    "toolResponse": {
      "filePath": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/index.test.ts",
      "oldString": "      expect(mockLog).toHaveBeenCalledWith(\n        JSON.stringify({\n          PreToolUse: [],\n          PostToolUse: [],\n          Stop: false,\n          Notification: false,\n          SubagentStop: false\n        })\n      );",
      "newString": "      const output = JSON.parse(mockLog.mock.calls[0][0]);\n      expect(output).toEqual({});",
      "originalFile": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { defineHook, defineHooks } from '../index';\nimport { \n  createPreToolUseInput, \n  createPostToolUseInput, \n  createStopInput,\n  createNotificationInput,\n  createSubagentStopInput \n} from './utils/mockData';\n\ndescribe('defineHook', () => {\n  it('should create a PreToolUse hook definition', () => {\n    const handler = vi.fn();\n    const hook = defineHook({\n      type: 'PreToolUse',\n      matcher: 'Bash',\n      handler\n    });\n\n    expect(hook.type).toBe('PreToolUse');\n    expect(hook.matcher).toBe('Bash');\n    expect(hook.handler).toBe(handler);\n  });\n\n  it('should create a PostToolUse hook definition', () => {\n    const handler = vi.fn();\n    const hook = defineHook({\n      type: 'PostToolUse',\n      matcher: '.*',\n      handler\n    });\n\n    expect(hook.type).toBe('PostToolUse');\n    expect(hook.matcher).toBe('.*');\n    expect(hook.handler).toBe(handler);\n  });\n\n  it('should create a Stop hook definition', () => {\n    const handler = vi.fn();\n    const hook = defineHook({\n      type: 'Stop',\n      handler\n    });\n\n    expect(hook.type).toBe('Stop');\n    expect(hook.handler).toBe(handler);\n  });\n\n  it('should create a Notification hook definition', () => {\n    const handler = vi.fn();\n    const hook = defineHook({\n      type: 'Notification',\n      handler\n    });\n\n    expect(hook.type).toBe('Notification');\n    expect(hook.handler).toBe(handler);\n  });\n\n  it('should create a SubagentStop hook definition', () => {\n    const handler = vi.fn();\n    const hook = defineHook({\n      type: 'SubagentStop',\n      handler\n    });\n\n    expect(hook.type).toBe('SubagentStop');\n    expect(hook.handler).toBe(handler);\n  });\n});\n\ndescribe('defineHooks', () => {\n  let originalArgv: string[];\n  let originalStdin: any;\n  let mockExit: any;\n\n  beforeEach(() => {\n    originalArgv = [...process.argv];\n    originalStdin = process.stdin;\n    mockExit = vi.spyOn(process, 'exit').mockImplementation(() => {\n      throw new Error('process.exit called');\n    });\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.stdin = originalStdin;\n    mockExit.mockRestore();\n  });\n\n  describe('__generate_settings mode', () => {\n    it('should output hook information in JSON format', async () => {\n      process.argv = ['node', 'test.js', '__generate_settings'];\n      const mockLog = vi.spyOn(console, 'log');\n\n      const hooks = {\n        PreToolUse: [\n          { matcher: 'Bash', handler: vi.fn() },\n          { matcher: 'Write', handler: vi.fn() }\n        ],\n        PostToolUse: [\n          { matcher: '.*', handler: vi.fn() }\n        ],\n        Stop: vi.fn(),\n        Notification: vi.fn()\n      };\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      const output = JSON.parse(mockLog.mock.calls[0][0]);\n      expect(output.PreToolUse).toHaveLength(2);\n      expect(output.PreToolUse[0]).toMatchObject({ matcher: 'Bash', handler: 'PreToolUse' });\n      expect(output.PreToolUse[1]).toMatchObject({ matcher: 'Write', handler: 'PreToolUse' });\n      expect(output.PostToolUse).toHaveLength(1);\n      expect(output.PostToolUse[0]).toMatchObject({ matcher: '.*', handler: 'PostToolUse' });\n      expect(output.Stop).toHaveLength(1);\n      expect(output.Notification).toHaveLength(1);\n      expect(mockExit).toHaveBeenCalledWith(0);\n    });\n\n    it('should handle empty hooks', async () => {\n      process.argv = ['node', 'test.js', '__generate_settings'];\n      const mockLog = vi.spyOn(console, 'log');\n\n      try {\n        await defineHooks({});\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(mockLog).toHaveBeenCalledWith(\n        JSON.stringify({\n          PreToolUse: [],\n          PostToolUse: [],\n          Stop: false,\n          Notification: false,\n          SubagentStop: false\n        })\n      );\n    });\n  });\n\n  describe('__run_hook mode', () => {\n    it('should run PreToolUse hook with correct parameters', async () => {\n      const handler = vi.fn().mockResolvedValue({ decision: 'approve' });\n      const hooks = {\n        PreToolUse: [{ matcher: 'Bash', handler }]\n      };\n\n      const input = createPreToolUseInput();\n      process.argv = ['node', 'test.js', '__run_hook', 'PreToolUse', 'Bash', '0'];\n      \n      // Mock stdin\n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback(JSON.stringify(input));\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(handler).toHaveBeenCalledWith(input);\n      expect(mockExit).toHaveBeenCalledWith(0);\n    });\n\n    it('should handle PostToolUse hook', async () => {\n      const handler = vi.fn().mockResolvedValue({});\n      const hooks = {\n        PostToolUse: [{ matcher: '.*', handler }]\n      };\n\n      const input = createPostToolUseInput();\n      process.argv = ['node', 'test.js', '__run_hook', 'PostToolUse', '.*', '0'];\n      \n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback(JSON.stringify(input));\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(handler).toHaveBeenCalledWith(input);\n    });\n\n    it('should handle Stop hook', async () => {\n      const handler = vi.fn().mockResolvedValue({});\n      const hooks = {\n        Stop: handler\n      };\n\n      const input = createStopInput();\n      process.argv = ['node', 'test.js', '__run_hook', 'Stop'];\n      \n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback(JSON.stringify(input));\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(handler).toHaveBeenCalledWith(input);\n    });\n\n    it('should handle hook errors gracefully', async () => {\n      const handler = vi.fn().mockRejectedValue(new Error('Hook failed'));\n      const hooks = {\n        PreToolUse: [{ matcher: 'Bash', handler }]\n      };\n\n      const input = createPreToolUseInput();\n      process.argv = ['node', 'test.js', '__run_hook', 'PreToolUse', 'Bash', '0'];\n      \n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback(JSON.stringify(input));\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      const mockError = vi.spyOn(console, 'error');\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(mockError).toHaveBeenCalledWith('Error in hook:', expect.any(Error));\n      expect(mockExit).toHaveBeenCalledWith(1);\n    });\n\n    it('should handle missing hook gracefully', async () => {\n      const hooks = {\n        PreToolUse: [{ matcher: 'Write', handler: vi.fn() }]\n      };\n\n      process.argv = ['node', 'test.js', '__run_hook', 'PreToolUse', 'Bash', '0'];\n      \n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback('{}');\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      const mockError = vi.spyOn(console, 'error');\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(mockError).toHaveBeenCalledWith('Hook not found');\n      expect(mockExit).toHaveBeenCalledWith(1);\n    });\n\n    it('should handle PreToolUse block result', async () => {\n      const handler = vi.fn().mockResolvedValue({ decision: 'block', reason: 'Blocked' });\n      const hooks = {\n        PreToolUse: [{ matcher: 'Bash', handler }]\n      };\n\n      const input = createPreToolUseInput();\n      process.argv = ['node', 'test.js', '__run_hook', 'PreToolUse', 'Bash', '0'];\n      \n      const mockStdin = {\n        setEncoding: vi.fn(),\n        on: vi.fn((event, callback) => {\n          if (event === 'data') {\n            callback(JSON.stringify(input));\n          } else if (event === 'end') {\n            callback();\n          }\n        }),\n        resume: vi.fn()\n      };\n      process.stdin = mockStdin as any;\n\n      const mockLog = vi.spyOn(console, 'log');\n      const mockError = vi.spyOn(console, 'error');\n\n      try {\n        await defineHooks(hooks);\n      } catch (e: any) {\n        expect(e.message).toBe('process.exit called');\n      }\n\n      expect(mockLog).toHaveBeenCalledWith(JSON.stringify({ decision: 'block', reason: 'Blocked' }));\n      expect(mockError).toHaveBeenCalledWith('Blocked');\n      expect(mockExit).toHaveBeenCalledWith(2);\n    });\n  });\n\n  describe('normal execution mode', () => {\n    it('should not execute hooks when not in CLI mode', async () => {\n      process.argv = ['node', 'test.js'];\n      const handler = vi.fn();\n      const hooks = {\n        PreToolUse: [{ matcher: 'Bash', handler }]\n      };\n\n      await defineHooks(hooks);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(mockExit).not.toHaveBeenCalled();\n    });\n  });\n});",
      "structuredPatch": [
        {
          "oldStart": 132,
          "oldLines": 15,
          "newStart": 132,
          "newLines": 8,
          "lines": [
            "         expect(e.message).toBe('process.exit called');",
            "       }",
            " ",
            "-      expect(mockLog).toHaveBeenCalledWith(",
            "-        JSON.stringify({",
            "-          PreToolUse: [],",
            "-          PostToolUse: [],",
            "-          Stop: false,",
            "-          Notification: false,",
            "-          SubagentStop: false",
            "-        })",
            "-      );",
            "+      const output = JSON.parse(mockLog.mock.calls[0][0]);",
            "+      expect(output).toEqual({});",
            "     });",
            "   });",
            " "
          ]
        }
      ],
      "userModified": false,
      "replaceAll": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:05.898Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:05.963Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:05.970Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:06.991Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 27,
          "newStart": 1,
          "newLines": 26,
          "lines": [
            " import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "-import { PreToolUseInput, PostToolUseInput, StopInput, NotificationInput } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PreToolUseInput) => {",
            "-        console.log(`[Test Hook] About to run Bash command: ${input.params.command}`);",
            "-        return { action: 'allow' };",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);",
            "+        return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ pattern: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PostToolUseInput) => {",
            "-        console.log(`[Test Hook] Bash command completed with ${input.output.status}`);",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);",
            "       }",
            "     }",
            "   ],",
            "   Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input: NotificationInput) => {",
            "-    console.log(`[Test Hook] Notification: ${input.notification.type} - ${input.notification.message}`);",
            "+  Notification: async (input) => {",
            "+    console.log(`[Test Hook] Notification: ${input.message}`);",
            "   }",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:34:07.034Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 27,
          "newStart": 1,
          "newLines": 26,
          "lines": [
            " import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "-import { PreToolUseInput, PostToolUseInput, StopInput, NotificationInput } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PreToolUseInput) => {",
            "-        console.log(`[Test Hook] About to run Bash command: ${input.params.command}`);",
            "-        return { action: 'allow' };",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);",
            "+        return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ pattern: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PostToolUseInput) => {",
            "-        console.log(`[Test Hook] Bash command completed with ${input.output.status}`);",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);",
            "       }",
            "     }",
            "   ],",
            "   Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input: NotificationInput) => {",
            "-    console.log(`[Test Hook] Notification: ${input.notification.type} - ${input.notification.message}`);",
            "+  Notification: async (input) => {",
            "+    console.log(`[Test Hook] Notification: ${input.message}`);",
            "   }",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:34:07.211Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: logStopEvents({ logPath: 'stop-events.json' }),\n  Notification: async (input) => {\n    console.log(`[Test Hook] Notification: ${input.message}`);\n  }\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 27,
          "newStart": 1,
          "newLines": 26,
          "lines": [
            " import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "-import { PreToolUseInput, PostToolUseInput, StopInput, NotificationInput } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PreToolUseInput) => {",
            "-        console.log(`[Test Hook] About to run Bash command: ${input.params.command}`);",
            "-        return { action: 'allow' };",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);",
            "+        return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ pattern: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {",
            "       matcher: 'Bash',",
            "-      handler: async (input: PostToolUseInput) => {",
            "-        console.log(`[Test Hook] Bash command completed with ${input.output.status}`);",
            "+      handler: async (input) => {",
            "+        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);",
            "       }",
            "     }",
            "   ],",
            "   Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input: NotificationInput) => {",
            "-    console.log(`[Test Hook] Notification: ${input.notification.type} - ${input.notification.message}`);",
            "+  Notification: async (input) => {",
            "+    console.log(`[Test Hook] Notification: ${input.message}`);",
            "   }",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:34:12.894Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:12.911Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:12.926Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:15.449Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    },
    "toolResponse": {
      "stdout": "Generated settings.json:\nNo settings.json found\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\nError: Error: Failed to load hooks: Error: Command failed: node -r ts-node/register \"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\" __generate_settings\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\n\n    at updateHooks (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:111:15)\n    at main (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:75:19)\n    at Object.<anonymous> (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:225:5)\n    at Module._compile (node:internal/modules/cjs/loader:1469:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:15.474Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    },
    "toolResponse": {
      "stdout": "Generated settings.json:\nNo settings.json found\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\nError: Error: Failed to load hooks: Error: Command failed: node -r ts-node/register \"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\" __generate_settings\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\n\n    at updateHooks (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:111:15)\n    at main (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:75:19)\n    at Object.<anonymous> (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:225:5)\n    at Module._compile (node:internal/modules/cjs/loader:1469:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:15.488Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script again"
    },
    "toolResponse": {
      "stdout": "Generated settings.json:\nNo settings.json found\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\nError: Error: Failed to load hooks: Error: Command failed: node -r ts-node/register \"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\" __generate_settings\n/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\n           ^\nTSError: ⨯ Unable to compile TypeScript:\n.claude/hooks/hooks.ts(12,27): error TS2353: Object literal may only specify known properties, and 'matcher' does not exist in type 'LogToolUseEventsOptions'.\n.claude/hooks/hooks.ts(22,3): error TS2322: Type 'HookHandler<\"Stop\">' is not assignable to type 'HookHandler<\"Stop\">[]'.\n.claude/hooks/hooks.ts(22,25): error TS2353: Object literal may only specify known properties, and 'logPath' does not exist in type 'LogStopEventsOptions'.\n.claude/hooks/hooks.ts(23,3): error TS2322: Type '(input: any) => Promise<void>' is not assignable to type 'HookHandler<\"Notification\">[]'.\n.claude/hooks/hooks.ts(23,24): error TS7006: Parameter 'input' implicitly has an 'any' type.\n\n    at createTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:859:12)\n    at reportTSError (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:863:19)\n    at getOutput (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1077:36)\n    at Object.compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1433:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1617:30)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {\n  diagnosticCodes: [ 2353, 2322, 2353, 2322, 7006 ]\n}\n\n    at updateHooks (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:111:15)\n    at main (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:75:19)\n    at Object.<anonymous> (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:225:5)\n    at Module._compile (node:internal/modules/cjs/loader:1469:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:26.820Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:26.838Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:26.840Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:28.684Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    },
    "toolResponse": {
      "stdout": "total 128\ndrwxr-xr-x@ 14 tim  staff   448  8 Jul 11:21 .\ndrwxr-xr-x@ 15 tim  staff   480  8 Jul 11:21 ..\n-rw-r--r--@  1 tim  staff   801  8 Jul 11:21 logNotificationEvents.d.ts\n-rw-r--r--@  1 tim  staff   384  8 Jul 11:21 logNotificationEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  3192  8 Jul 11:21 logNotificationEvents.js\n-rw-r--r--@  1 tim  staff  1391  8 Jul 11:21 logNotificationEvents.js.map\n-rw-r--r--@  1 tim  staff  1027  8 Jul 11:21 logStopEvents.d.ts\n-rw-r--r--@  1 tim  staff   452  8 Jul 11:21 logStopEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  4699  8 Jul 11:21 logStopEvents.js\n-rw-r--r--@  1 tim  staff  2548  8 Jul 11:21 logStopEvents.js.map\n-rw-r--r--@  1 tim  staff  2263  8 Jul 11:21 logToolUseEvents.d.ts\n-rw-r--r--@  1 tim  staff   762  8 Jul 11:21 logToolUseEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  9613  8 Jul 11:21 logToolUseEvents.js\n-rw-r--r--@  1 tim  staff  5924  8 Jul 11:21 logToolUseEvents.js.map",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:28.700Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    },
    "toolResponse": {
      "stdout": "total 128\ndrwxr-xr-x@ 14 tim  staff   448  8 Jul 11:21 .\ndrwxr-xr-x@ 15 tim  staff   480  8 Jul 11:21 ..\n-rw-r--r--@  1 tim  staff   801  8 Jul 11:21 logNotificationEvents.d.ts\n-rw-r--r--@  1 tim  staff   384  8 Jul 11:21 logNotificationEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  3192  8 Jul 11:21 logNotificationEvents.js\n-rw-r--r--@  1 tim  staff  1391  8 Jul 11:21 logNotificationEvents.js.map\n-rw-r--r--@  1 tim  staff  1027  8 Jul 11:21 logStopEvents.d.ts\n-rw-r--r--@  1 tim  staff   452  8 Jul 11:21 logStopEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  4699  8 Jul 11:21 logStopEvents.js\n-rw-r--r--@  1 tim  staff  2548  8 Jul 11:21 logStopEvents.js.map\n-rw-r--r--@  1 tim  staff  2263  8 Jul 11:21 logToolUseEvents.d.ts\n-rw-r--r--@  1 tim  staff   762  8 Jul 11:21 logToolUseEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  9613  8 Jul 11:21 logToolUseEvents.js\n-rw-r--r--@  1 tim  staff  5924  8 Jul 11:21 logToolUseEvents.js.map",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:28.744Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "ls -la /Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/",
      "description": "List hooks directory"
    },
    "toolResponse": {
      "stdout": "total 128\ndrwxr-xr-x@ 14 tim  staff   448  8 Jul 11:21 .\ndrwxr-xr-x@ 15 tim  staff   480  8 Jul 11:21 ..\n-rw-r--r--@  1 tim  staff   801  8 Jul 11:21 logNotificationEvents.d.ts\n-rw-r--r--@  1 tim  staff   384  8 Jul 11:21 logNotificationEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  3192  8 Jul 11:21 logNotificationEvents.js\n-rw-r--r--@  1 tim  staff  1391  8 Jul 11:21 logNotificationEvents.js.map\n-rw-r--r--@  1 tim  staff  1027  8 Jul 11:21 logStopEvents.d.ts\n-rw-r--r--@  1 tim  staff   452  8 Jul 11:21 logStopEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  4699  8 Jul 11:21 logStopEvents.js\n-rw-r--r--@  1 tim  staff  2548  8 Jul 11:21 logStopEvents.js.map\n-rw-r--r--@  1 tim  staff  2263  8 Jul 11:21 logToolUseEvents.d.ts\n-rw-r--r--@  1 tim  staff   762  8 Jul 11:21 logToolUseEvents.d.ts.map\n-rw-r--r--@  1 tim  staff  9613  8 Jul 11:21 logToolUseEvents.js\n-rw-r--r--@  1 tim  staff  5924  8 Jul 11:21 logToolUseEvents.js.map",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:34:41.428Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:41.525Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:41.533Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:43.271Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogToolUseEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.tool-use.json'\n     */\n    logFileName?: string;\n    /**\n     * Whether to include the full tool input in the log.\n     * Can be useful to disable for sensitive data or large inputs.\n     * @default true\n     */\n    includeToolInput?: boolean;\n    /**\n     * Whether to include the full tool response in the log (PostToolUse only).\n     * Can be useful to disable for sensitive data or large responses.\n     * @default true\n     */\n    includeToolResponse?: boolean;\n}\n/**\n * Creates a PreToolUse hook that logs tool use events before execution\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs tool use events after execution\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\n/**\n * Creates a PreToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\nexport {};\n//# sourceMappingURL=logToolUseEvents.d.ts.map",
        "numLines": 54,
        "startLine": 1,
        "totalLines": 54
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:43.304Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogToolUseEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.tool-use.json'\n     */\n    logFileName?: string;\n    /**\n     * Whether to include the full tool input in the log.\n     * Can be useful to disable for sensitive data or large inputs.\n     * @default true\n     */\n    includeToolInput?: boolean;\n    /**\n     * Whether to include the full tool response in the log (PostToolUse only).\n     * Can be useful to disable for sensitive data or large responses.\n     * @default true\n     */\n    includeToolResponse?: boolean;\n}\n/**\n * Creates a PreToolUse hook that logs tool use events before execution\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs tool use events after execution\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\n/**\n * Creates a PreToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\nexport {};\n//# sourceMappingURL=logToolUseEvents.d.ts.map",
        "numLines": 54,
        "startLine": 1,
        "totalLines": 54
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:43.330Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logToolUseEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogToolUseEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.tool-use.json'\n     */\n    logFileName?: string;\n    /**\n     * Whether to include the full tool input in the log.\n     * Can be useful to disable for sensitive data or large inputs.\n     * @default true\n     */\n    includeToolInput?: boolean;\n    /**\n     * Whether to include the full tool response in the log (PostToolUse only).\n     * Can be useful to disable for sensitive data or large responses.\n     * @default true\n     */\n    includeToolResponse?: boolean;\n}\n/**\n * Creates a PreToolUse hook that logs tool use events before execution\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs tool use events after execution\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEvents: (options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\n/**\n * Creates a PreToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PreToolUse hook definition\n */\nexport declare const logPreToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PreToolUse\">;\n/**\n * Creates a PostToolUse hook that logs specific tools only\n * @param toolMatcher Regex pattern to match tool names (e.g., \"Bash|Write|Edit\")\n * @param options Configuration options for the logger\n * @returns A PostToolUse hook definition\n */\nexport declare const logPostToolUseEventsForTools: (toolMatcher: string, options?: LogToolUseEventsOptions) => AnyHookDefinition<\"PostToolUse\">;\nexport {};\n//# sourceMappingURL=logToolUseEvents.d.ts.map",
        "numLines": 54,
        "startLine": 1,
        "totalLines": 54
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:51.638Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:51.646Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:51.676Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:53.471Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogStopEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.stop.json'\n     */\n    logFileName?: string;\n}\n/**\n * Creates a Stop hook that logs stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A Stop hook definition\n */\nexport declare const logStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"Stop\">;\n/**\n * Creates a SubagentStop hook that logs subagent stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A SubagentStop hook definition\n */\nexport declare const logSubagentStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"SubagentStop\">;\nexport {};\n//# sourceMappingURL=logStopEvents.d.ts.map",
        "numLines": 28,
        "startLine": 1,
        "totalLines": 28
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:53.615Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogStopEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.stop.json'\n     */\n    logFileName?: string;\n}\n/**\n * Creates a Stop hook that logs stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A Stop hook definition\n */\nexport declare const logStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"Stop\">;\n/**\n * Creates a SubagentStop hook that logs subagent stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A SubagentStop hook definition\n */\nexport declare const logSubagentStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"SubagentStop\">;\nexport {};\n//# sourceMappingURL=logStopEvents.d.ts.map",
        "numLines": 28,
        "startLine": 1,
        "totalLines": 28
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:53.884Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/hooks/logStopEvents.d.ts",
        "content": "import { AnyHookDefinition } from '../types';\ninterface LogStopEventsOptions {\n    /**\n     * Maximum number of events to store in the log file.\n     * When the limit is reached, oldest events are removed first.\n     * @default 100\n     */\n    maxEventsStored?: number;\n    /**\n     * Path to the log file relative to current working directory.\n     * @default 'hook-log.stop.json'\n     */\n    logFileName?: string;\n}\n/**\n * Creates a Stop hook that logs stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A Stop hook definition\n */\nexport declare const logStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"Stop\">;\n/**\n * Creates a SubagentStop hook that logs subagent stop events to a JSON file\n * @param options Configuration options for the logger\n * @returns A SubagentStop hook definition\n */\nexport declare const logSubagentStopEvents: (options?: LogStopEventsOptions) => AnyHookDefinition<\"SubagentStop\">;\nexport {};\n//# sourceMappingURL=logStopEvents.d.ts.map",
        "numLines": 28,
        "startLine": 1,
        "totalLines": 28
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:34:56.137Z",
    "event": "PreToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/cli.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock modules\nvi.mock('child_process');\nvi.mock('fs');\n\nconst mockExecSync = execSync as any;\nconst mockFs = fs as any;\n\n// Store original process values\nlet originalArgv: string[];\nlet originalExit: any;\nlet originalLog: any;\nlet originalError: any;\n\ndescribe('CLI', () => {\n  let tempDir: string;\n\n  beforeEach(() => {\n    tempDir = '/tmp/test-hooks';\n    originalArgv = [...process.argv];\n    originalExit = process.exit;\n    originalLog = console.log;\n    originalError = console.error;\n    \n    process.exit = vi.fn() as any;\n    console.log = vi.fn();\n    console.error = vi.fn();\n\n    // Mock fs methods\n    mockFs.existsSync = vi.fn();\n    mockFs.readFileSync = vi.fn();\n    mockFs.writeFileSync = vi.fn();\n    mockFs.mkdirSync = vi.fn();\n\n    // Clear module cache to ensure fresh import\n    vi.resetModules();\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.exit = originalExit;\n    console.log = originalLog;\n    console.error = originalError;\n    vi.clearAllMocks();\n  });\n\n  describe('command parsing', () => {\n    it('should show help when no arguments provided', async () => {\n      process.argv = ['node', 'cli.js'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('define-claude-code-hooks'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with --help flag', async () => {\n      process.argv = ['node', 'cli.js', '--help'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with -h flag', async () => {\n      process.argv = ['node', 'cli.js', '-h'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n  });\n\n  describe('update command', () => {\n    const mockSettingsContent = JSON.stringify({\n      hooks: {\n        PreToolUse: [\n          { command: 'echo \"old hook\"' },\n          { command: 'node hooks.ts __run_hook # __managed_by_define_claude_code_hooks__' }\n        ]\n      }\n    }, null, 2);\n\n    const mockHookInfo = {\n      PreToolUse: [\n        { matcher: 'Bash', handler: 'PreToolUse', index: 0 }, \n        { matcher: 'Write', handler: 'PreToolUse', index: 1 }\n      ],\n      PostToolUse: [{ matcher: '.*', handler: 'PostToolUse', index: 0 }],\n      Stop: [{ handler: 'Stop', count: 1 }]\n    };\n\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      // Mock finding hooks file\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      // Mock reading settings file\n      mockFs.readFileSync.mockImplementation((path: string) => {\n        if (path.endsWith('settings.json')) {\n          return mockSettingsContent;\n        }\n        return '';\n      });\n\n      // Mock executing hooks file to get info\n      mockExecSync.mockReturnValue(JSON.stringify(mockHookInfo));\n    });\n\n    it('should update settings.json with new hooks', async () => {\n      await import('../cli');\n\n      // Verify hooks discovery\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('__generate_settings'),\n        expect.objectContaining({ encoding: 'utf8' })\n      );\n\n      // Verify settings file was written\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Check that managed hooks were replaced\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ command: 'echo \"old hook\"' })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Bash\"')\n        })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Write\"')\n        })\n      );\n    });\n\n    it('should create settings.json if it does not exist', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return false;\n        if (path.endsWith('.claude')) return false;\n        return false;\n      });\n\n      await import('../cli');\n\n      // Should create .claude directory\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('.claude'),\n        { recursive: true }\n      );\n\n      // Should write new settings file\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      expect(writtenContent).toHaveProperty('hooks');\n      expect(writtenContent.hooks).toHaveProperty('PreToolUse');\n      expect(writtenContent.hooks).toHaveProperty('PostToolUse');\n    });\n\n    it('should handle different package managers', async () => {\n      // Test with yarn\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('yarn.lock')) return true;\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n      const command = writtenContent.hooks.PreToolUse[1].command;\n\n      expect(command).toContain('yarn tsx');\n    });\n\n    it('should exit with error if hooks file not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('not found')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n\n    it('should handle errors from hooks execution', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Hooks file error');\n      });\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('Error discovering hooks')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n  });\n\n  describe('remove command', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'remove'];\n      \n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ],\n          PostToolUse: [\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      }));\n    });\n\n    it('should remove only managed hooks from settings.json', async () => {\n      await import('../cli');\n\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // User hooks should remain\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(1);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n\n      // Managed hooks should be removed\n      expect(writtenContent.hooks.PostToolUse).toHaveLength(0);\n    });\n\n    it('should handle settings.json not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('No settings.json found')\n      );\n    });\n  });\n\n  describe('--global flag', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update', '--global'];\n      \n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      const globalHooksPath = path.join(os.homedir(), '.claude', 'hooks', 'hooks.ts');\n\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === globalHooksPath) return true;\n        if (path === globalSettingsPath) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({ hooks: {} }));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [],\n        PostToolUse: [],\n        Stop: [],\n        Notification: [],\n        SubagentStop: []\n      }));\n    });\n\n    it('should update global settings when --global flag is used', async () => {\n      await import('../cli');\n\n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      \n      expect(mockFs.readFileSync).toHaveBeenCalledWith(globalSettingsPath, 'utf8');\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        globalSettingsPath,\n        expect.any(String),\n        'utf8'\n      );\n    });\n  });\n\n  describe('integration', () => {\n    it('should handle complex settings structure', async () => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      const complexSettings = {\n        someOtherConfig: { foo: 'bar' },\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"1\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' },\n            { command: 'echo \"2\"' }\n          ],\n          CustomHook: [{ command: 'custom' }]\n        },\n        moreConfig: { baz: 'qux' }\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(JSON.stringify(complexSettings));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [{ matcher: 'New', handler: 'PreToolUse', index: 0 }]\n      }));\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Other config should be preserved\n      expect(writtenContent.someOtherConfig).toEqual({ foo: 'bar' });\n      expect(writtenContent.moreConfig).toEqual({ baz: 'qux' });\n      expect(writtenContent.hooks.CustomHook).toEqual([{ command: 'custom' }]);\n\n      // Managed hooks should be updated\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(3);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"1\"');\n      expect(writtenContent.hooks.PreToolUse[2].command).toBe('echo \"2\"');\n      expect(writtenContent.hooks.PreToolUse[1].command).toContain('__run_hook PreToolUse \"New\"');\n    });\n  });\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:34:56.957Z",
    "event": "PostToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/cli.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock modules\nvi.mock('child_process');\nvi.mock('fs');\n\nconst mockExecSync = execSync as any;\nconst mockFs = fs as any;\n\n// Store original process values\nlet originalArgv: string[];\nlet originalExit: any;\nlet originalLog: any;\nlet originalError: any;\n\ndescribe('CLI', () => {\n  let tempDir: string;\n\n  beforeEach(() => {\n    tempDir = '/tmp/test-hooks';\n    originalArgv = [...process.argv];\n    originalExit = process.exit;\n    originalLog = console.log;\n    originalError = console.error;\n    \n    process.exit = vi.fn() as any;\n    console.log = vi.fn();\n    console.error = vi.fn();\n\n    // Mock fs methods\n    mockFs.existsSync = vi.fn();\n    mockFs.readFileSync = vi.fn();\n    mockFs.writeFileSync = vi.fn();\n    mockFs.mkdirSync = vi.fn();\n\n    // Clear module cache to ensure fresh import\n    vi.resetModules();\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.exit = originalExit;\n    console.log = originalLog;\n    console.error = originalError;\n    vi.clearAllMocks();\n  });\n\n  describe('command parsing', () => {\n    it('should show help when no arguments provided', async () => {\n      process.argv = ['node', 'cli.js'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('define-claude-code-hooks'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with --help flag', async () => {\n      process.argv = ['node', 'cli.js', '--help'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with -h flag', async () => {\n      process.argv = ['node', 'cli.js', '-h'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n  });\n\n  describe('update command', () => {\n    const mockSettingsContent = JSON.stringify({\n      hooks: {\n        PreToolUse: [\n          { command: 'echo \"old hook\"' },\n          { command: 'node hooks.ts __run_hook # __managed_by_define_claude_code_hooks__' }\n        ]\n      }\n    }, null, 2);\n\n    const mockHookInfo = {\n      PreToolUse: [\n        { matcher: 'Bash', handler: 'PreToolUse', index: 0 }, \n        { matcher: 'Write', handler: 'PreToolUse', index: 1 }\n      ],\n      PostToolUse: [{ matcher: '.*', handler: 'PostToolUse', index: 0 }],\n      Stop: [{ handler: 'Stop', count: 1 }]\n    };\n\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      // Mock finding hooks file\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      // Mock reading settings file\n      mockFs.readFileSync.mockImplementation((path: string) => {\n        if (path.endsWith('settings.json')) {\n          return mockSettingsContent;\n        }\n        return '';\n      });\n\n      // Mock executing hooks file to get info\n      mockExecSync.mockReturnValue(JSON.stringify(mockHookInfo));\n    });\n\n    it('should update settings.json with new hooks', async () => {\n      await import('../cli');\n\n      // Verify hooks discovery\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('__generate_settings'),\n        expect.objectContaining({ encoding: 'utf8' })\n      );\n\n      // Verify settings file was written\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Check that managed hooks were replaced\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ command: 'echo \"old hook\"' })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Bash\"')\n        })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Write\"')\n        })\n      );\n    });\n\n    it('should create settings.json if it does not exist', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return false;\n        if (path.endsWith('.claude')) return false;\n        return false;\n      });\n\n      await import('../cli');\n\n      // Should create .claude directory\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('.claude'),\n        { recursive: true }\n      );\n\n      // Should write new settings file\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      expect(writtenContent).toHaveProperty('hooks');\n      expect(writtenContent.hooks).toHaveProperty('PreToolUse');\n      expect(writtenContent.hooks).toHaveProperty('PostToolUse');\n    });\n\n    it('should handle different package managers', async () => {\n      // Test with yarn\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('yarn.lock')) return true;\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n      const command = writtenContent.hooks.PreToolUse[1].command;\n\n      expect(command).toContain('yarn tsx');\n    });\n\n    it('should exit with error if hooks file not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('not found')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n\n    it('should handle errors from hooks execution', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Hooks file error');\n      });\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('Error discovering hooks')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n  });\n\n  describe('remove command', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'remove'];\n      \n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ],\n          PostToolUse: [\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      }));\n    });\n\n    it('should remove only managed hooks from settings.json', async () => {\n      await import('../cli');\n\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // User hooks should remain\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(1);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n\n      // Managed hooks should be removed\n      expect(writtenContent.hooks.PostToolUse).toHaveLength(0);\n    });\n\n    it('should handle settings.json not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('No settings.json found')\n      );\n    });\n  });\n\n  describe('--global flag', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update', '--global'];\n      \n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      const globalHooksPath = path.join(os.homedir(), '.claude', 'hooks', 'hooks.ts');\n\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === globalHooksPath) return true;\n        if (path === globalSettingsPath) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({ hooks: {} }));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [],\n        PostToolUse: [],\n        Stop: [],\n        Notification: [],\n        SubagentStop: []\n      }));\n    });\n\n    it('should update global settings when --global flag is used', async () => {\n      await import('../cli');\n\n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      \n      expect(mockFs.readFileSync).toHaveBeenCalledWith(globalSettingsPath, 'utf8');\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        globalSettingsPath,\n        expect.any(String),\n        'utf8'\n      );\n    });\n  });\n\n  describe('integration', () => {\n    it('should handle complex settings structure', async () => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      const complexSettings = {\n        someOtherConfig: { foo: 'bar' },\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"1\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' },\n            { command: 'echo \"2\"' }\n          ],\n          CustomHook: [{ command: 'custom' }]\n        },\n        moreConfig: { baz: 'qux' }\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(JSON.stringify(complexSettings));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [{ matcher: 'New', handler: 'PreToolUse', index: 0 }]\n      }));\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Other config should be preserved\n      expect(writtenContent.someOtherConfig).toEqual({ foo: 'bar' });\n      expect(writtenContent.moreConfig).toEqual({ baz: 'qux' });\n      expect(writtenContent.hooks.CustomHook).toEqual([{ command: 'custom' }]);\n\n      // Managed hooks should be updated\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(3);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"1\"');\n      expect(writtenContent.hooks.PreToolUse[2].command).toBe('echo \"2\"');\n      expect(writtenContent.hooks.PreToolUse[1].command).toContain('__run_hook PreToolUse \"New\"');\n    });\n  });\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/cli.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock modules\nvi.mock('child_process');\nvi.mock('fs');\n\nconst mockExecSync = execSync as any;\nconst mockFs = fs as any;\n\n// Store original process values\nlet originalArgv: string[];\nlet originalExit: any;\nlet originalLog: any;\nlet originalError: any;\n\ndescribe('CLI', () => {\n  let tempDir: string;\n\n  beforeEach(() => {\n    tempDir = '/tmp/test-hooks';\n    originalArgv = [...process.argv];\n    originalExit = process.exit;\n    originalLog = console.log;\n    originalError = console.error;\n    \n    process.exit = vi.fn() as any;\n    console.log = vi.fn();\n    console.error = vi.fn();\n\n    // Mock fs methods\n    mockFs.existsSync = vi.fn();\n    mockFs.readFileSync = vi.fn();\n    mockFs.writeFileSync = vi.fn();\n    mockFs.mkdirSync = vi.fn();\n\n    // Clear module cache to ensure fresh import\n    vi.resetModules();\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.exit = originalExit;\n    console.log = originalLog;\n    console.error = originalError;\n    vi.clearAllMocks();\n  });\n\n  describe('command parsing', () => {\n    it('should show help when no arguments provided', async () => {\n      process.argv = ['node', 'cli.js'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('define-claude-code-hooks'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with --help flag', async () => {\n      process.argv = ['node', 'cli.js', '--help'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n\n    it('should show help with -h flag', async () => {\n      process.argv = ['node', 'cli.js', '-h'];\n      \n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Usage:'));\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n  });\n\n  describe('update command', () => {\n    const mockSettingsContent = JSON.stringify({\n      hooks: {\n        PreToolUse: [\n          { command: 'echo \"old hook\"' },\n          { command: 'node hooks.ts __run_hook # __managed_by_define_claude_code_hooks__' }\n        ]\n      }\n    }, null, 2);\n\n    const mockHookInfo = {\n      PreToolUse: [\n        { matcher: 'Bash', handler: 'PreToolUse', index: 0 }, \n        { matcher: 'Write', handler: 'PreToolUse', index: 1 }\n      ],\n      PostToolUse: [{ matcher: '.*', handler: 'PostToolUse', index: 0 }],\n      Stop: [{ handler: 'Stop', count: 1 }]\n    };\n\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      // Mock finding hooks file\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      // Mock reading settings file\n      mockFs.readFileSync.mockImplementation((path: string) => {\n        if (path.endsWith('settings.json')) {\n          return mockSettingsContent;\n        }\n        return '';\n      });\n\n      // Mock executing hooks file to get info\n      mockExecSync.mockReturnValue(JSON.stringify(mockHookInfo));\n    });\n\n    it('should update settings.json with new hooks', async () => {\n      await import('../cli');\n\n      // Verify hooks discovery\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('__generate_settings'),\n        expect.objectContaining({ encoding: 'utf8' })\n      );\n\n      // Verify settings file was written\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Check that managed hooks were replaced\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ command: 'echo \"old hook\"' })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Bash\"')\n        })\n      );\n      expect(writtenContent.hooks.PreToolUse).toContainEqual(\n        expect.objectContaining({ \n          command: expect.stringContaining('__run_hook PreToolUse \"Write\"')\n        })\n      );\n    });\n\n    it('should create settings.json if it does not exist', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return false;\n        if (path.endsWith('.claude')) return false;\n        return false;\n      });\n\n      await import('../cli');\n\n      // Should create .claude directory\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('.claude'),\n        { recursive: true }\n      );\n\n      // Should write new settings file\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      expect(writtenContent).toHaveProperty('hooks');\n      expect(writtenContent.hooks).toHaveProperty('PreToolUse');\n      expect(writtenContent.hooks).toHaveProperty('PostToolUse');\n    });\n\n    it('should handle different package managers', async () => {\n      // Test with yarn\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('yarn.lock')) return true;\n        if (path.endsWith('.claude/hooks/hooks.ts')) return true;\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n      const command = writtenContent.hooks.PreToolUse[1].command;\n\n      expect(command).toContain('yarn tsx');\n    });\n\n    it('should exit with error if hooks file not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('not found')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n\n    it('should handle errors from hooks execution', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Hooks file error');\n      });\n\n      await import('../cli');\n\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('Error discovering hooks')\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n  });\n\n  describe('remove command', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'remove'];\n      \n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path.endsWith('.claude/settings.json')) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ],\n          PostToolUse: [\n            { command: 'node hooks.ts # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      }));\n    });\n\n    it('should remove only managed hooks from settings.json', async () => {\n      await import('../cli');\n\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // User hooks should remain\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(1);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n\n      // Managed hooks should be removed\n      expect(writtenContent.hooks.PostToolUse).toHaveLength(0);\n    });\n\n    it('should handle settings.json not found', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await import('../cli');\n\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('No settings.json found')\n      );\n    });\n  });\n\n  describe('--global flag', () => {\n    beforeEach(() => {\n      process.argv = ['node', 'cli.js', 'update', '--global'];\n      \n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      const globalHooksPath = path.join(os.homedir(), '.claude', 'hooks', 'hooks.ts');\n\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === globalHooksPath) return true;\n        if (path === globalSettingsPath) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({ hooks: {} }));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [],\n        PostToolUse: [],\n        Stop: [],\n        Notification: [],\n        SubagentStop: []\n      }));\n    });\n\n    it('should update global settings when --global flag is used', async () => {\n      await import('../cli');\n\n      const globalSettingsPath = path.join(os.homedir(), '.claude', 'settings.json');\n      \n      expect(mockFs.readFileSync).toHaveBeenCalledWith(globalSettingsPath, 'utf8');\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        globalSettingsPath,\n        expect.any(String),\n        'utf8'\n      );\n    });\n  });\n\n  describe('integration', () => {\n    it('should handle complex settings structure', async () => {\n      process.argv = ['node', 'cli.js', 'update'];\n      \n      const complexSettings = {\n        someOtherConfig: { foo: 'bar' },\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"1\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' },\n            { command: 'echo \"2\"' }\n          ],\n          CustomHook: [{ command: 'custom' }]\n        },\n        moreConfig: { baz: 'qux' }\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(JSON.stringify(complexSettings));\n      mockExecSync.mockReturnValue(JSON.stringify({\n        PreToolUse: [{ matcher: 'New', handler: 'PreToolUse', index: 0 }]\n      }));\n\n      await import('../cli');\n\n      const writeCall = mockFs.writeFileSync.mock.calls[0];\n      const writtenContent = JSON.parse(writeCall[1]);\n\n      // Other config should be preserved\n      expect(writtenContent.someOtherConfig).toEqual({ foo: 'bar' });\n      expect(writtenContent.moreConfig).toEqual({ baz: 'qux' });\n      expect(writtenContent.hooks.CustomHook).toEqual([{ command: 'custom' }]);\n\n      // Managed hooks should be updated\n      expect(writtenContent.hooks.PreToolUse).toHaveLength(3);\n      expect(writtenContent.hooks.PreToolUse[0].command).toBe('echo \"1\"');\n      expect(writtenContent.hooks.PreToolUse[2].command).toBe('echo \"2\"');\n      expect(writtenContent.hooks.PreToolUse[1].command).toContain('__run_hook PreToolUse \"New\"');\n    });\n  });\n});",
      "structuredPatch": [
        {
          "oldStart": 11,
          "oldLines": 14,
          "newStart": 11,
          "newLines": 18,
          "lines": [
            " const mockExecSync = execSync as any;",
            " const mockFs = fs as any;",
            " ",
            "+// Store original process values",
            "+let originalArgv: string[];",
            "+let originalExit: any;",
            "+let originalLog: any;",
            "+let originalError: any;",
            "+",
            " describe('CLI', () => {",
            "   let tempDir: string;",
            "-  let originalExit: any;",
            "-  let originalLog: any;",
            "-  let originalError: any;",
            " ",
            "   beforeEach(() => {",
            "     tempDir = '/tmp/test-hooks';",
            "+    originalArgv = [...process.argv];",
            "     originalExit = process.exit;",
            "     originalLog = console.log;",
            "     originalError = console.error;"
          ]
        },
        {
          "oldStart": 32,
          "oldLines": 9,
          "newStart": 36,
          "newLines": 13,
          "lines": [
            "     mockFs.readFileSync = vi.fn();",
            "     mockFs.writeFileSync = vi.fn();",
            "     mockFs.mkdirSync = vi.fn();",
            "+",
            "+    // Clear module cache to ensure fresh import",
            "+    vi.resetModules();",
            "   });",
            " ",
            "   afterEach(() => {",
            "+    process.argv = originalArgv;",
            "     process.exit = originalExit;",
            "     console.log = originalLog;",
            "     console.error = originalError;"
          ]
        },
        {
          "oldStart": 82,
          "oldLines": 11,
          "newStart": 90,
          "newLines": 12,
          "lines": [
            "     }, null, 2);",
            " ",
            "     const mockHookInfo = {",
            "-      PreToolUse: [{ matcher: 'Bash' }, { matcher: 'Write' }],",
            "-      PostToolUse: [{ matcher: '.*' }],",
            "-      Stop: true,",
            "-      Notification: false,",
            "-      SubagentStop: false",
            "+      PreToolUse: [",
            "+        { matcher: 'Bash', handler: 'PreToolUse', index: 0 }, ",
            "+        { matcher: 'Write', handler: 'PreToolUse', index: 1 }",
            "+      ],",
            "+      PostToolUse: [{ matcher: '.*', handler: 'PostToolUse', index: 0 }],",
            "+      Stop: [{ handler: 'Stop', count: 1 }]",
            "     };",
            " ",
            "     beforeEach(() => {"
          ]
        },
        {
          "oldStart": 275,
          "oldLines": 9,
          "newStart": 284,
          "newLines": 9,
          "lines": [
            "       mockExecSync.mockReturnValue(JSON.stringify({",
            "         PreToolUse: [],",
            "         PostToolUse: [],",
            "-        Stop: false,",
            "-        Notification: false,",
            "-        SubagentStop: false",
            "+        Stop: [],",
            "+        Notification: [],",
            "+        SubagentStop: []",
            "       }));",
            "     });",
            " "
          ]
        },
        {
          "oldStart": 315,
          "oldLines": 11,
          "newStart": 324,
          "newLines": 7,
          "lines": [
            "       mockFs.existsSync.mockReturnValue(true);",
            "       mockFs.readFileSync.mockReturnValue(JSON.stringify(complexSettings));",
            "       mockExecSync.mockReturnValue(JSON.stringify({",
            "-        PreToolUse: [{ matcher: 'New' }],",
            "-        PostToolUse: [],",
            "-        Stop: false,",
            "-        Notification: false,",
            "-        SubagentStop: false",
            "+        PreToolUse: [{ matcher: 'New', handler: 'PreToolUse', index: 0 }]",
            "       }));",
            " ",
            "       await import('../cli');"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:01.151Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:01.168Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:02.325Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts",
        "content": "#!/usr/bin/env node\nimport { HookType, HookDefinition, AnyHookDefinition } from './types';\nexport * from './types';\nexport { logStopEvents, logSubagentStopEvents } from './hooks/logStopEvents';\nexport { logNotificationEvents } from './hooks/logNotificationEvents';\nexport { logPreToolUseEvents, logPostToolUseEvents, logPreToolUseEventsForTools, logPostToolUseEventsForTools } from './hooks/logToolUseEvents';\n/**\n * Define a typed hook handler for Claude Code\n * @param type The type of hook (PreToolUse, PostToolUse, etc.)\n * @param definition The hook definition (with matcher for tool hooks, or just handler for others)\n * @returns A hook definition object\n */\nexport declare function defineHook<T extends HookType>(type: T, definition: AnyHookDefinition<T>): AnyHookDefinition<T>;\n/**\n * Define multiple hooks with matchers\n * @param hooks Object mapping hook types to matchers and handlers\n * @returns Object with all hook definitions\n */\nexport declare function defineHooks(hooks: HookDefinition): HookDefinition;\n//# sourceMappingURL=index.d.ts.map",
        "numLines": 20,
        "startLine": 1,
        "totalLines": 20
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:02.354Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts",
        "content": "#!/usr/bin/env node\nimport { HookType, HookDefinition, AnyHookDefinition } from './types';\nexport * from './types';\nexport { logStopEvents, logSubagentStopEvents } from './hooks/logStopEvents';\nexport { logNotificationEvents } from './hooks/logNotificationEvents';\nexport { logPreToolUseEvents, logPostToolUseEvents, logPreToolUseEventsForTools, logPostToolUseEventsForTools } from './hooks/logToolUseEvents';\n/**\n * Define a typed hook handler for Claude Code\n * @param type The type of hook (PreToolUse, PostToolUse, etc.)\n * @param definition The hook definition (with matcher for tool hooks, or just handler for others)\n * @returns A hook definition object\n */\nexport declare function defineHook<T extends HookType>(type: T, definition: AnyHookDefinition<T>): AnyHookDefinition<T>;\n/**\n * Define multiple hooks with matchers\n * @param hooks Object mapping hook types to matchers and handlers\n * @returns Object with all hook definitions\n */\nexport declare function defineHooks(hooks: HookDefinition): HookDefinition;\n//# sourceMappingURL=index.d.ts.map",
        "numLines": 20,
        "startLine": 1,
        "totalLines": 20
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:02.361Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts"
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/index.d.ts",
        "content": "#!/usr/bin/env node\nimport { HookType, HookDefinition, AnyHookDefinition } from './types';\nexport * from './types';\nexport { logStopEvents, logSubagentStopEvents } from './hooks/logStopEvents';\nexport { logNotificationEvents } from './hooks/logNotificationEvents';\nexport { logPreToolUseEvents, logPostToolUseEvents, logPreToolUseEventsForTools, logPostToolUseEventsForTools } from './hooks/logToolUseEvents';\n/**\n * Define a typed hook handler for Claude Code\n * @param type The type of hook (PreToolUse, PostToolUse, etc.)\n * @param definition The hook definition (with matcher for tool hooks, or just handler for others)\n * @returns A hook definition object\n */\nexport declare function defineHook<T extends HookType>(type: T, definition: AnyHookDefinition<T>): AnyHookDefinition<T>;\n/**\n * Define multiple hooks with matchers\n * @param hooks Object mapping hook types to matchers and handlers\n * @returns Object with all hook definitions\n */\nexport declare function defineHooks(hooks: HookDefinition): HookDefinition;\n//# sourceMappingURL=index.d.ts.map",
        "numLines": 20,
        "startLine": 1,
        "totalLines": 20
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:07.905Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    }
  },
  {
    "timestamp": "2025-07-08T01:35:07.917Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    }
  },
  {
    "timestamp": "2025-07-08T01:35:07.939Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    }
  },
  {
    "timestamp": "2025-07-08T01:35:08.902Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
        "content": "    };\n}\nexport type HookDefinition = {\n    PreToolUse?: ToolHookDefinition<'PreToolUse'>[];\n    PostToolUse?: ToolHookDefinition<'PostToolUse'>[];\n    Notification?: NonToolHookDefinition<'Notification'>[];\n    Stop?: NonToolHookDefinition<'Stop'>[];\n    SubagentStop?: NonToolHookDefinition<'SubagentStop'>[];\n};\nexport {};\n//# sourceMappingURL=types.d.ts.map",
        "numLines": 11,
        "startLine": 100,
        "totalLines": 110
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:08.921Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
        "content": "    };\n}\nexport type HookDefinition = {\n    PreToolUse?: ToolHookDefinition<'PreToolUse'>[];\n    PostToolUse?: ToolHookDefinition<'PostToolUse'>[];\n    Notification?: NonToolHookDefinition<'Notification'>[];\n    Stop?: NonToolHookDefinition<'Stop'>[];\n    SubagentStop?: NonToolHookDefinition<'SubagentStop'>[];\n};\nexport {};\n//# sourceMappingURL=types.d.ts.map",
        "numLines": 11,
        "startLine": 100,
        "totalLines": 110
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:08.933Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
      "offset": 100,
      "limit": 50
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/types.d.ts",
        "content": "    };\n}\nexport type HookDefinition = {\n    PreToolUse?: ToolHookDefinition<'PreToolUse'>[];\n    PostToolUse?: ToolHookDefinition<'PostToolUse'>[];\n    Notification?: NonToolHookDefinition<'Notification'>[];\n    Stop?: NonToolHookDefinition<'Stop'>[];\n    SubagentStop?: NonToolHookDefinition<'SubagentStop'>[];\n};\nexport {};\n//# sourceMappingURL=types.d.ts.map",
        "numLines": 11,
        "startLine": 100,
        "totalLines": 110
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:20.901Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:20.905Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:21.868Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 4,
          "newStart": 1,
          "newLines": 4,
          "lines": [
            "-import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "+import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: ["
          ]
        },
        {
          "oldStart": 9,
          "oldLines": 7,
          "newStart": 9,
          "newLines": 7,
          "lines": [
            "         return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {"
          ]
        },
        {
          "oldStart": 19,
          "oldLines": 8,
          "newStart": 19,
          "newLines": 12,
          "lines": [
            "       }",
            "     }",
            "   ],",
            "-  Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input) => {",
            "-    console.log(`[Test Hook] Notification: ${input.message}`);",
            "-  }",
            "+  Stop: [",
            "+    logStopEvents({ logFileName: 'stop-events.json' })",
            "+  ],",
            "+  Notification: [",
            "+    async (input) => {",
            "+      console.log(`[Test Hook] Notification: ${input.message}`);",
            "+    }",
            "+  ]",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:21.878Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 4,
          "newStart": 1,
          "newLines": 4,
          "lines": [
            "-import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "+import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: ["
          ]
        },
        {
          "oldStart": 9,
          "oldLines": 7,
          "newStart": 9,
          "newLines": 7,
          "lines": [
            "         return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {"
          ]
        },
        {
          "oldStart": 19,
          "oldLines": 8,
          "newStart": 19,
          "newLines": 12,
          "lines": [
            "       }",
            "     }",
            "   ],",
            "-  Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input) => {",
            "-    console.log(`[Test Hook] Notification: ${input.message}`);",
            "-  }",
            "+  Stop: [",
            "+    logStopEvents({ logFileName: 'stop-events.json' })",
            "+  ],",
            "+  Notification: [",
            "+    async (input) => {",
            "+      console.log(`[Test Hook] Notification: ${input.message}`);",
            "+    }",
            "+  ]",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:21.892Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts",
      "content": "import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n\ndefineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] About to run Bash command: ${JSON.stringify(input.tool_input)}`);\n        return { decision: 'approve' };\n      }\n    },\n    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })\n  ],\n  PostToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log(`[Test Hook] Bash command completed: ${JSON.stringify(input.tool_response)}`);\n      }\n    }\n  ],\n  Stop: [\n    logStopEvents({ logFileName: 'stop-events.json' })\n  ],\n  Notification: [\n    async (input) => {\n      console.log(`[Test Hook] Notification: ${input.message}`);\n    }\n  ]\n});",
      "structuredPatch": [
        {
          "oldStart": 1,
          "oldLines": 4,
          "newStart": 1,
          "newLines": 4,
          "lines": [
            "-import { defineHooks, logPreToolUseEvents, logPostToolUseEvents, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            "+import { defineHooks, logPreToolUseEventsForTools, logPostToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';",
            " ",
            " defineHooks({",
            "   PreToolUse: ["
          ]
        },
        {
          "oldStart": 9,
          "oldLines": 7,
          "newStart": 9,
          "newLines": 7,
          "lines": [
            "         return { decision: 'approve' };",
            "       }",
            "     },",
            "-    logPreToolUseEvents({ matcher: 'Read', logPath: 'read-tool-log.json' })",
            "+    logPreToolUseEventsForTools('Read', { logFileName: 'read-tool-log.json' })",
            "   ],",
            "   PostToolUse: [",
            "     {"
          ]
        },
        {
          "oldStart": 19,
          "oldLines": 8,
          "newStart": 19,
          "newLines": 12,
          "lines": [
            "       }",
            "     }",
            "   ],",
            "-  Stop: logStopEvents({ logPath: 'stop-events.json' }),",
            "-  Notification: async (input) => {",
            "-    console.log(`[Test Hook] Notification: ${input.message}`);",
            "-  }",
            "+  Stop: [",
            "+    logStopEvents({ logFileName: 'stop-events.json' })",
            "+  ],",
            "+  Notification: [",
            "+    async (input) => {",
            "+      console.log(`[Test Hook] Notification: ${input.message}`);",
            "+    }",
            "+  ]",
            " });",
            "\\ No newline at end of file"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:27.665Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:27.693Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:29.720Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    },
    "toolResponse": {
      "stdout": "Generated settings.json:\nNo settings.json found\n(node:21128) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts:1\nimport { defineHooks, logPreToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at wrapSafe (node:internal/modules/cjs/loader:1378:20)\n    at Module._compile (node:internal/modules/cjs/loader:1428:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1618:23)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49\nError: Error: Failed to load hooks: Error: Command failed: node -r ts-node/register \"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\" __generate_settings\n(node:21128) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts:1\nimport { defineHooks, logPreToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at wrapSafe (node:internal/modules/cjs/loader:1378:20)\n    at Module._compile (node:internal/modules/cjs/loader:1428:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1618:23)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49\n\n    at updateHooks (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:111:15)\n    at main (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:75:19)\n    at Object.<anonymous> (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:225:5)\n    at Module._compile (node:internal/modules/cjs/loader:1469:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:35:29.734Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    },
    "toolResponse": {
      "stdout": "Generated settings.json:\nNo settings.json found\n(node:21128) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts:1\nimport { defineHooks, logPreToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at wrapSafe (node:internal/modules/cjs/loader:1378:20)\n    at Module._compile (node:internal/modules/cjs/loader:1428:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1618:23)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49\nError: Error: Failed to load hooks: Error: Command failed: node -r ts-node/register \"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\" __generate_settings\n(node:21128) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts:1\nimport { defineHooks, logPreToolUseEventsForTools, logStopEvents } from '@timoaus/define-claude-code-hooks';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at wrapSafe (node:internal/modules/cjs/loader:1378:20)\n    at Module._compile (node:internal/modules/cjs/loader:1428:41)\n    at Module.m._compile (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1618:23)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Object.require.extensions.<computed> [as .ts] (/Users/tim/repos/test-claude-code-hooks/node_modules/ts-node/src/index.ts:1621:12)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49\n\n    at updateHooks (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:111:15)\n    at main (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:75:19)\n    at Object.<anonymous> (/Users/tim/repos/test-claude-code-hooks/node_modules/@timoaus/define-claude-code-hooks/dist/cli.js:225:5)\n    at Module._compile (node:internal/modules/cjs/loader:1469:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\n    at Module.load (node:internal/modules/cjs/loader:1288:32)\n    at Module._load (node:internal/modules/cjs/loader:1104:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n    at node:internal/main/run_main_module:28:49",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:35:37.427Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:37.438Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:37.445Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:38.526Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}"
    },
    "toolResponse": {
      "type": "create",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}",
      "structuredPatch": []
    }
  },
  {
    "timestamp": "2025-07-08T01:35:38.533Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}"
    },
    "toolResponse": {
      "type": "create",
      "filePath": "/Users/tim/repos/test-claude-code-hooks/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}",
      "structuredPatch": []
    }
  },
  {
    "timestamp": "2025-07-08T01:35:45.038Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:45.079Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:45.126Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    }
  },
  {
    "timestamp": "2025-07-08T01:35:47.081Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    },
    "toolResponse": {
      "stdout": "Updated project settings at /Users/tim/repos/test-claude-code-hooks/.claude/settings.json\nGenerated settings.json:\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"Read\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Read\\\" \\\"1\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PostToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Stop\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Stop # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Notification\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Notification # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:35:47.151Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    },
    "toolResponse": {
      "stdout": "Updated project settings at /Users/tim/repos/test-claude-code-hooks/.claude/settings.json\nGenerated settings.json:\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"Read\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Read\\\" \\\"1\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PostToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Stop\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Stop # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Notification\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Notification # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:35:47.154Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "bash /Users/tim/repos/test-claude-code-hooks/test-package.sh",
      "description": "Run test script"
    },
    "toolResponse": {
      "stdout": "Updated project settings at /Users/tim/repos/test-claude-code-hooks/.claude/settings.json\nGenerated settings.json:\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"Read\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PreToolUse \\\"Read\\\" \\\"1\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook PostToolUse \\\"Bash\\\" \\\"0\\\" # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Stop\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Stop # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ],\n    \"Notification\": [\n      {\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"node -r ts-node/register --no-warnings \\\"/Users/tim/repos/test-claude-code-hooks/.claude/hooks/hooks.ts\\\" __run_hook Notification # __managed_by_define_claude_code_hooks__\"\n          }\n        ]\n      }\n    ]\n  }\n}",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:35:50.005Z",
    "event": "PreToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
      "offset": 210,
      "limit": 40
    }
  },
  {
    "timestamp": "2025-07-08T01:35:50.712Z",
    "event": "PostToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Read",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
      "offset": 210,
      "limit": 40
    },
    "toolResponse": {
      "type": "text",
      "file": {
        "filePath": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
        "content": "        }\n      );\n\n      // Execute PostToolUse\n      const postToolInput = {\n        tool_name: 'Write',\n        input_json: { file_path: 'test.txt', content: 'hello' },\n        output: 'File written successfully',\n        error: null,\n        duration_ms: 50\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PostToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(postToolInput)\n        }\n      );\n\n      // Execute Stop\n      const stopInput = {\n        reason: 'completed',\n        stats: {\n          input_tokens: 100,\n          output_tokens: 50,\n          total_tokens: 150,\n          input_cached_tokens: 0,\n          output_cached_tokens: 0,\n          total_cached_tokens: 0\n        }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)",
        "numLines": 40,
        "startLine": 210,
        "totalLines": 390
      }
    }
  },
  {
    "timestamp": "2025-07-08T01:35:55.863Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:55.870Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:55.881Z",
    "event": "PreToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:56.830Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    },
    "toolResponse": {
      "oldTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "in_progress",
          "priority": "medium",
          "id": "5"
        }
      ],
      "newTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:56.922Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    },
    "toolResponse": {
      "oldTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "in_progress",
          "priority": "medium",
          "id": "5"
        }
      ],
      "newTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:35:56.928Z",
    "event": "PostToolUse",
    "sessionId": "ed1a7feb-0090-4a3d-a9b5-db4f8321d96c",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/ed1a7feb-0090-4a3d-a9b5-db4f8321d96c.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    },
    "toolResponse": {
      "oldTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "in_progress",
          "priority": "medium",
          "id": "5"
        }
      ],
      "newTodos": [
        {
          "content": "Initialize npm project in test folder",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Install @timoaus/define-claude-code-hooks package",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create a test hooks.ts file",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Run define-claude-code-hooks CLI to generate settings",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Verify settings.json was created correctly",
          "status": "completed",
          "priority": "medium",
          "id": "5"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:36:07.316Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:07.328Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:07.492Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:08.503Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    },
    "toolResponse": {
      "filenames": [],
      "durationMs": 129,
      "numFiles": 0,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:08.522Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    },
    "toolResponse": {
      "filenames": [],
      "durationMs": 129,
      "numFiles": 0,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:08.541Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/publish.yml"
    },
    "toolResponse": {
      "filenames": [],
      "durationMs": 129,
      "numFiles": 0,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:16.109Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:16.122Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:16.136Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:17.100Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    },
    "toolResponse": {
      "filenames": [
        "/Users/tim/repos/define-claude-code-hooks/node_modules/bun-types/docs/cli/publish.md"
      ],
      "durationMs": 107,
      "numFiles": 1,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:17.118Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    },
    "toolResponse": {
      "filenames": [
        "/Users/tim/repos/define-claude-code-hooks/node_modules/bun-types/docs/cli/publish.md"
      ],
      "durationMs": 107,
      "numFiles": 1,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:17.125Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": "**/*publish*"
    },
    "toolResponse": {
      "filenames": [
        "/Users/tim/repos/define-claude-code-hooks/node_modules/bun-types/docs/cli/publish.md"
      ],
      "durationMs": 107,
      "numFiles": 1,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:51.674Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": ".github/workflows/*.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:51.683Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": ".github/workflows/*.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:52.395Z",
    "event": "PreToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { fileURLToPath } from 'url';\n\ndescribe('Integration Tests', () => {\n  let tempDir: string;\n  let originalCwd: string;\n\n  beforeEach(() => {\n    // Create a temporary directory for test files\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'hooks-test-'));\n    originalCwd = process.cwd();\n    process.chdir(tempDir);\n\n    // Create directory structure\n    fs.mkdirSync(path.join(tempDir, '.claude', 'hooks'), { recursive: true });\n  });\n\n  afterEach(() => {\n    process.chdir(originalCwd);\n    // Clean up temp directory\n    fs.rmSync(tempDir, { recursive: true, force: true });\n  });\n\n  describe('End-to-end workflow', () => {\n    it('should define hooks, generate settings, and execute hooks', () => {\n      // Step 1: Create a hooks.ts file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log('PreToolUse:', JSON.stringify(input));\n        return { decision: 'approve' };\n      }\n    }\n  ],\n  PostToolUse: [\n    {\n      matcher: '.*',\n      handler: async (input) => {\n        console.log('PostToolUse:', JSON.stringify(input));\n        return {};\n      }\n    }\n  ],\n  Stop: async (input) => {\n    console.log('Stop:', JSON.stringify(input));\n    return {};\n  }\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Step 2: Test __generate_settings mode\n      const generateResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __generate_settings`,\n        { encoding: 'utf8', cwd: tempDir }\n      );\n\n      const hookInfo = JSON.parse(generateResult);\n      expect(hookInfo.PreToolUse).toHaveLength(1);\n      expect(hookInfo.PreToolUse[0]).toMatchObject({ matcher: 'Bash', handler: 'PreToolUse' });\n      expect(hookInfo.PostToolUse).toHaveLength(1);\n      expect(hookInfo.PostToolUse[0]).toMatchObject({ matcher: '.*', handler: 'PostToolUse' });\n      expect(hookInfo.Stop).toHaveLength(1);\n\n      // Step 3: Test __run_hook mode for PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      const preToolResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      expect(preToolResult).toContain('PreToolUse:');\n      expect(preToolResult).toContain('\"tool_name\":\"Bash\"');\n\n      // Step 4: Test __run_hook mode for Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      const stopResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      expect(stopResult).toContain('Stop:');\n      expect(stopResult).toContain('\"stop_hook_active\":true');\n    });\n\n    it('should handle PreToolUse block results correctly', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        if (input.tool_input.command?.includes('rm')) {\n          return { decision: 'block', reason: 'Dangerous command blocked' };\n        }\n        return { decision: 'approve' };\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Test with dangerous command\n      const dangerousInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'rm -rf /' }\n      };\n\n      const skipResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(dangerousInput)\n        }\n      );\n\n      const skipOutput = JSON.parse(skipResult);\n      expect(skipOutput).toEqual({\n        decision: 'block',\n        reason: 'Dangerous command blocked'\n      });\n\n      // Test with safe command\n      const safeInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"safe\"' }\n      };\n\n      const allowResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(safeInput)\n        }\n      );\n\n      expect(allowResult.trim()).toBe('');\n    });\n\n    it('should handle logging hooks integration', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\nimport { logPreToolUseEvents, logPostToolUseEvents } from '${path.resolve(originalCwd, 'src/hooks/logToolUseEvents')}';\nimport { logStopEvents } from '${path.resolve(originalCwd, 'src/hooks/logStopEvents')}';\n\nconst preToolLogger = logPreToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst postToolLogger = logPostToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst stopLogger = logStopEvents('./stop-events.json', 5);\n\nexport default defineHooks({\n  PreToolUse: [preToolLogger],\n  PostToolUse: [postToolLogger],\n  Stop: stopLogger\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Execute PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      // Execute PostToolUse\n      const postToolInput = {\n        hook_event_name: 'PostToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' },\n        tool_response: { output: 'File written successfully' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PostToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(postToolInput)\n        }\n      );\n\n      // Execute Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      // Verify log files were created\n      const toolLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'tool-events.json'), 'utf8'));\n      expect(toolLog).toHaveLength(2);\n      expect(toolLog[0].event).toBe('PreToolUse');\n      expect(toolLog[1].event).toBe('PostToolUse');\n\n      const stopLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'stop-events.json'), 'utf8'));\n      expect(stopLog).toHaveLength(1);\n      expect(stopLog[0].type).toBe('Stop');\n    });\n\n    it('should handle errors gracefully', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        throw new Error('Hook error');\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      const input = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      // Should exit with error code 1\n      expect(() => {\n        execSync(\n          `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n          { \n            encoding: 'utf8', \n            cwd: tempDir,\n            input: JSON.stringify(input),\n            stdio: 'pipe'\n          }\n        );\n      }).toThrow();\n    });\n  });\n\n  describe('CLI integration', () => {\n    it('should generate correct settings.json from hooks file', () => {\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'Bash', handler: async () => ({ decision: 'approve' }) },\n    { matcher: 'Write', handler: async () => ({ decision: 'approve' }) }\n  ],\n  Stop: async () => ({})\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update command\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings.json was created\n      const settingsPath = path.join(tempDir, '.claude/settings.json');\n      expect(fs.existsSync(settingsPath)).toBe(true);\n\n      const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n      expect(settings.hooks).toBeDefined();\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.Stop).toHaveLength(1);\n\n      // Verify commands contain ts-node\n      const bashHook = settings.hooks.PreToolUse.find((h: any) => \n        h.command.includes('\"Bash\"')\n      );\n      expect(bashHook).toBeDefined();\n      expect(bashHook.command).toContain('ts-node/register');\n      expect(bashHook.command).toContain('__managed_by_define_claude_code_hooks__');\n    });\n\n    it('should preserve existing non-managed hooks', () => {\n      // Create existing settings with mixed hooks\n      const existingSettings = {\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      };\n\n      fs.writeFileSync(\n        path.join(tempDir, '.claude/settings.json'), \n        JSON.stringify(existingSettings, null, 2)\n      );\n\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'NewHook', handler: async () => ({ decision: 'approve' }) }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings\n      const settings = JSON.parse(\n        fs.readFileSync(path.join(tempDir, '.claude/settings.json'), 'utf8')\n      );\n\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n      expect(settings.hooks.PreToolUse[1].command).toContain('NewHook');\n    });\n  });\n});"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:52.987Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": ".github/workflows/*.yml"
    },
    "toolResponse": {
      "filenames": [
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/publish.yml",
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/ci.yml",
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/release.yml"
      ],
      "durationMs": 97,
      "numFiles": 3,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:52.992Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Glob",
    "toolInput": {
      "pattern": ".github/workflows/*.yml"
    },
    "toolResponse": {
      "filenames": [
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/publish.yml",
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/ci.yml",
        "/Users/tim/repos/define-claude-code-hooks/.github/workflows/release.yml"
      ],
      "durationMs": 97,
      "numFiles": 3,
      "truncated": false
    }
  },
  {
    "timestamp": "2025-07-08T01:36:53.348Z",
    "event": "PostToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "Write",
    "toolInput": {
      "file_path": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { fileURLToPath } from 'url';\n\ndescribe('Integration Tests', () => {\n  let tempDir: string;\n  let originalCwd: string;\n\n  beforeEach(() => {\n    // Create a temporary directory for test files\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'hooks-test-'));\n    originalCwd = process.cwd();\n    process.chdir(tempDir);\n\n    // Create directory structure\n    fs.mkdirSync(path.join(tempDir, '.claude', 'hooks'), { recursive: true });\n  });\n\n  afterEach(() => {\n    process.chdir(originalCwd);\n    // Clean up temp directory\n    fs.rmSync(tempDir, { recursive: true, force: true });\n  });\n\n  describe('End-to-end workflow', () => {\n    it('should define hooks, generate settings, and execute hooks', () => {\n      // Step 1: Create a hooks.ts file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log('PreToolUse:', JSON.stringify(input));\n        return { decision: 'approve' };\n      }\n    }\n  ],\n  PostToolUse: [\n    {\n      matcher: '.*',\n      handler: async (input) => {\n        console.log('PostToolUse:', JSON.stringify(input));\n        return {};\n      }\n    }\n  ],\n  Stop: async (input) => {\n    console.log('Stop:', JSON.stringify(input));\n    return {};\n  }\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Step 2: Test __generate_settings mode\n      const generateResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __generate_settings`,\n        { encoding: 'utf8', cwd: tempDir }\n      );\n\n      const hookInfo = JSON.parse(generateResult);\n      expect(hookInfo.PreToolUse).toHaveLength(1);\n      expect(hookInfo.PreToolUse[0]).toMatchObject({ matcher: 'Bash', handler: 'PreToolUse' });\n      expect(hookInfo.PostToolUse).toHaveLength(1);\n      expect(hookInfo.PostToolUse[0]).toMatchObject({ matcher: '.*', handler: 'PostToolUse' });\n      expect(hookInfo.Stop).toHaveLength(1);\n\n      // Step 3: Test __run_hook mode for PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      const preToolResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      expect(preToolResult).toContain('PreToolUse:');\n      expect(preToolResult).toContain('\"tool_name\":\"Bash\"');\n\n      // Step 4: Test __run_hook mode for Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      const stopResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      expect(stopResult).toContain('Stop:');\n      expect(stopResult).toContain('\"stop_hook_active\":true');\n    });\n\n    it('should handle PreToolUse block results correctly', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        if (input.tool_input.command?.includes('rm')) {\n          return { decision: 'block', reason: 'Dangerous command blocked' };\n        }\n        return { decision: 'approve' };\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Test with dangerous command\n      const dangerousInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'rm -rf /' }\n      };\n\n      const skipResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(dangerousInput)\n        }\n      );\n\n      const skipOutput = JSON.parse(skipResult);\n      expect(skipOutput).toEqual({\n        decision: 'block',\n        reason: 'Dangerous command blocked'\n      });\n\n      // Test with safe command\n      const safeInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"safe\"' }\n      };\n\n      const allowResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(safeInput)\n        }\n      );\n\n      expect(allowResult.trim()).toBe('');\n    });\n\n    it('should handle logging hooks integration', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\nimport { logPreToolUseEvents, logPostToolUseEvents } from '${path.resolve(originalCwd, 'src/hooks/logToolUseEvents')}';\nimport { logStopEvents } from '${path.resolve(originalCwd, 'src/hooks/logStopEvents')}';\n\nconst preToolLogger = logPreToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst postToolLogger = logPostToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst stopLogger = logStopEvents('./stop-events.json', 5);\n\nexport default defineHooks({\n  PreToolUse: [preToolLogger],\n  PostToolUse: [postToolLogger],\n  Stop: stopLogger\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Execute PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      // Execute PostToolUse\n      const postToolInput = {\n        hook_event_name: 'PostToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' },\n        tool_response: { output: 'File written successfully' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PostToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(postToolInput)\n        }\n      );\n\n      // Execute Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      // Verify log files were created\n      const toolLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'tool-events.json'), 'utf8'));\n      expect(toolLog).toHaveLength(2);\n      expect(toolLog[0].event).toBe('PreToolUse');\n      expect(toolLog[1].event).toBe('PostToolUse');\n\n      const stopLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'stop-events.json'), 'utf8'));\n      expect(stopLog).toHaveLength(1);\n      expect(stopLog[0].type).toBe('Stop');\n    });\n\n    it('should handle errors gracefully', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        throw new Error('Hook error');\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      const input = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      // Should exit with error code 1\n      expect(() => {\n        execSync(\n          `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n          { \n            encoding: 'utf8', \n            cwd: tempDir,\n            input: JSON.stringify(input),\n            stdio: 'pipe'\n          }\n        );\n      }).toThrow();\n    });\n  });\n\n  describe('CLI integration', () => {\n    it('should generate correct settings.json from hooks file', () => {\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'Bash', handler: async () => ({ decision: 'approve' }) },\n    { matcher: 'Write', handler: async () => ({ decision: 'approve' }) }\n  ],\n  Stop: async () => ({})\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update command\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings.json was created\n      const settingsPath = path.join(tempDir, '.claude/settings.json');\n      expect(fs.existsSync(settingsPath)).toBe(true);\n\n      const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n      expect(settings.hooks).toBeDefined();\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.Stop).toHaveLength(1);\n\n      // Verify commands contain ts-node\n      const bashHook = settings.hooks.PreToolUse.find((h: any) => \n        h.command.includes('\"Bash\"')\n      );\n      expect(bashHook).toBeDefined();\n      expect(bashHook.command).toContain('ts-node/register');\n      expect(bashHook.command).toContain('__managed_by_define_claude_code_hooks__');\n    });\n\n    it('should preserve existing non-managed hooks', () => {\n      // Create existing settings with mixed hooks\n      const existingSettings = {\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      };\n\n      fs.writeFileSync(\n        path.join(tempDir, '.claude/settings.json'), \n        JSON.stringify(existingSettings, null, 2)\n      );\n\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'NewHook', handler: async () => ({ decision: 'approve' }) }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings\n      const settings = JSON.parse(\n        fs.readFileSync(path.join(tempDir, '.claude/settings.json'), 'utf8')\n      );\n\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n      expect(settings.hooks.PreToolUse[1].command).toContain('NewHook');\n    });\n  });\n});"
    },
    "toolResponse": {
      "type": "update",
      "filePath": "/Users/tim/repos/define-claude-code-hooks/src/__tests__/integration.test.ts",
      "content": "import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { fileURLToPath } from 'url';\n\ndescribe('Integration Tests', () => {\n  let tempDir: string;\n  let originalCwd: string;\n\n  beforeEach(() => {\n    // Create a temporary directory for test files\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'hooks-test-'));\n    originalCwd = process.cwd();\n    process.chdir(tempDir);\n\n    // Create directory structure\n    fs.mkdirSync(path.join(tempDir, '.claude', 'hooks'), { recursive: true });\n  });\n\n  afterEach(() => {\n    process.chdir(originalCwd);\n    // Clean up temp directory\n    fs.rmSync(tempDir, { recursive: true, force: true });\n  });\n\n  describe('End-to-end workflow', () => {\n    it('should define hooks, generate settings, and execute hooks', () => {\n      // Step 1: Create a hooks.ts file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        console.log('PreToolUse:', JSON.stringify(input));\n        return { decision: 'approve' };\n      }\n    }\n  ],\n  PostToolUse: [\n    {\n      matcher: '.*',\n      handler: async (input) => {\n        console.log('PostToolUse:', JSON.stringify(input));\n        return {};\n      }\n    }\n  ],\n  Stop: async (input) => {\n    console.log('Stop:', JSON.stringify(input));\n    return {};\n  }\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Step 2: Test __generate_settings mode\n      const generateResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __generate_settings`,\n        { encoding: 'utf8', cwd: tempDir }\n      );\n\n      const hookInfo = JSON.parse(generateResult);\n      expect(hookInfo.PreToolUse).toHaveLength(1);\n      expect(hookInfo.PreToolUse[0]).toMatchObject({ matcher: 'Bash', handler: 'PreToolUse' });\n      expect(hookInfo.PostToolUse).toHaveLength(1);\n      expect(hookInfo.PostToolUse[0]).toMatchObject({ matcher: '.*', handler: 'PostToolUse' });\n      expect(hookInfo.Stop).toHaveLength(1);\n\n      // Step 3: Test __run_hook mode for PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      const preToolResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      expect(preToolResult).toContain('PreToolUse:');\n      expect(preToolResult).toContain('\"tool_name\":\"Bash\"');\n\n      // Step 4: Test __run_hook mode for Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      const stopResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      expect(stopResult).toContain('Stop:');\n      expect(stopResult).toContain('\"stop_hook_active\":true');\n    });\n\n    it('should handle PreToolUse block results correctly', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        if (input.tool_input.command?.includes('rm')) {\n          return { decision: 'block', reason: 'Dangerous command blocked' };\n        }\n        return { decision: 'approve' };\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Test with dangerous command\n      const dangerousInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'rm -rf /' }\n      };\n\n      const skipResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(dangerousInput)\n        }\n      );\n\n      const skipOutput = JSON.parse(skipResult);\n      expect(skipOutput).toEqual({\n        decision: 'block',\n        reason: 'Dangerous command blocked'\n      });\n\n      // Test with safe command\n      const safeInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"safe\"' }\n      };\n\n      const allowResult = execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(safeInput)\n        }\n      );\n\n      expect(allowResult.trim()).toBe('');\n    });\n\n    it('should handle logging hooks integration', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\nimport { logPreToolUseEvents, logPostToolUseEvents } from '${path.resolve(originalCwd, 'src/hooks/logToolUseEvents')}';\nimport { logStopEvents } from '${path.resolve(originalCwd, 'src/hooks/logStopEvents')}';\n\nconst preToolLogger = logPreToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst postToolLogger = logPostToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });\nconst stopLogger = logStopEvents('./stop-events.json', 5);\n\nexport default defineHooks({\n  PreToolUse: [preToolLogger],\n  PostToolUse: [postToolLogger],\n  Stop: stopLogger\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Execute PreToolUse\n      const preToolInput = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(preToolInput)\n        }\n      );\n\n      // Execute PostToolUse\n      const postToolInput = {\n        hook_event_name: 'PostToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Write',\n        tool_input: { file_path: 'test.txt', content: 'hello' },\n        tool_response: { output: 'File written successfully' }\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PostToolUse \".*\" \"0\"`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(postToolInput)\n        }\n      );\n\n      // Execute Stop\n      const stopInput = {\n        hook_event_name: 'Stop',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        stop_hook_active: true\n      };\n\n      execSync(\n        `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook Stop`,\n        { \n          encoding: 'utf8', \n          cwd: tempDir,\n          input: JSON.stringify(stopInput)\n        }\n      );\n\n      // Verify log files were created\n      const toolLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'tool-events.json'), 'utf8'));\n      expect(toolLog).toHaveLength(2);\n      expect(toolLog[0].event).toBe('PreToolUse');\n      expect(toolLog[1].event).toBe('PostToolUse');\n\n      const stopLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'stop-events.json'), 'utf8'));\n      expect(stopLog).toHaveLength(1);\n      expect(stopLog[0].type).toBe('Stop');\n    });\n\n    it('should handle errors gracefully', () => {\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    {\n      matcher: 'Bash',\n      handler: async (input) => {\n        throw new Error('Hook error');\n      }\n    }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      const input = {\n        hook_event_name: 'PreToolUse',\n        session_id: 'test-session',\n        transcript_path: '/tmp/transcript.json',\n        tool_name: 'Bash',\n        tool_input: { command: 'echo \"test\"' }\n      };\n\n      // Should exit with error code 1\n      expect(() => {\n        execSync(\n          `node -r ts-node/register ${path.join(tempDir, '.claude/hooks/hooks.ts')} __run_hook PreToolUse \"Bash\" \"0\"`,\n          { \n            encoding: 'utf8', \n            cwd: tempDir,\n            input: JSON.stringify(input),\n            stdio: 'pipe'\n          }\n        );\n      }).toThrow();\n    });\n  });\n\n  describe('CLI integration', () => {\n    it('should generate correct settings.json from hooks file', () => {\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'Bash', handler: async () => ({ decision: 'approve' }) },\n    { matcher: 'Write', handler: async () => ({ decision: 'approve' }) }\n  ],\n  Stop: async () => ({})\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update command\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings.json was created\n      const settingsPath = path.join(tempDir, '.claude/settings.json');\n      expect(fs.existsSync(settingsPath)).toBe(true);\n\n      const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n      expect(settings.hooks).toBeDefined();\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.Stop).toHaveLength(1);\n\n      // Verify commands contain ts-node\n      const bashHook = settings.hooks.PreToolUse.find((h: any) => \n        h.command.includes('\"Bash\"')\n      );\n      expect(bashHook).toBeDefined();\n      expect(bashHook.command).toContain('ts-node/register');\n      expect(bashHook.command).toContain('__managed_by_define_claude_code_hooks__');\n    });\n\n    it('should preserve existing non-managed hooks', () => {\n      // Create existing settings with mixed hooks\n      const existingSettings = {\n        hooks: {\n          PreToolUse: [\n            { command: 'echo \"user hook\"' },\n            { command: 'old managed # __managed_by_define_claude_code_hooks__' }\n          ]\n        }\n      };\n\n      fs.writeFileSync(\n        path.join(tempDir, '.claude/settings.json'), \n        JSON.stringify(existingSettings, null, 2)\n      );\n\n      // Create hooks file\n      const hooksContent = `\nimport { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';\n\nexport default defineHooks({\n  PreToolUse: [\n    { matcher: 'NewHook', handler: async () => ({ decision: 'approve' }) }\n  ]\n});\n`;\n\n      fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);\n\n      // Run CLI update\n      const cliPath = path.resolve(originalCwd, 'src/cli.ts');\n      execSync(\n        `node -r ts-node/register ${cliPath} update`,\n        { cwd: tempDir }\n      );\n\n      // Verify settings\n      const settings = JSON.parse(\n        fs.readFileSync(path.join(tempDir, '.claude/settings.json'), 'utf8')\n      );\n\n      expect(settings.hooks.PreToolUse).toHaveLength(2);\n      expect(settings.hooks.PreToolUse[0].command).toBe('echo \"user hook\"');\n      expect(settings.hooks.PreToolUse[1].command).toContain('NewHook');\n    });\n  });\n});",
      "structuredPatch": [
        {
          "oldStart": 37,
          "oldLines": 7,
          "newStart": 37,
          "newLines": 7,
          "lines": [
            "       matcher: 'Bash',",
            "       handler: async (input) => {",
            "         console.log('PreToolUse:', JSON.stringify(input));",
            "-        return { skip: false };",
            "+        return { decision: 'approve' };",
            "       }",
            "     }",
            "   ],"
          ]
        },
        {
          "oldStart": 66,
          "oldLines": 18,
          "newStart": 66,
          "newLines": 19,
          "lines": [
            "       );",
            " ",
            "       const hookInfo = JSON.parse(generateResult);",
            "-      expect(hookInfo).toEqual({",
            "-        PreToolUse: [{ matcher: 'Bash' }],",
            "-        PostToolUse: [{ matcher: '.*' }],",
            "-        Stop: true,",
            "-        Notification: false,",
            "-        SubagentStop: false",
            "-      });",
            "+      expect(hookInfo.PreToolUse).toHaveLength(1);",
            "+      expect(hookInfo.PreToolUse[0]).toMatchObject({ matcher: 'Bash', handler: 'PreToolUse' });",
            "+      expect(hookInfo.PostToolUse).toHaveLength(1);",
            "+      expect(hookInfo.PostToolUse[0]).toMatchObject({ matcher: '.*', handler: 'PostToolUse' });",
            "+      expect(hookInfo.Stop).toHaveLength(1);",
            " ",
            "       // Step 3: Test __run_hook mode for PreToolUse",
            "       const preToolInput = {",
            "+        hook_event_name: 'PreToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Bash',",
            "-        input_json: { command: 'echo \"test\"' }",
            "+        tool_input: { command: 'echo \"test\"' }",
            "       };",
            " ",
            "       const preToolResult = execSync("
          ]
        },
        {
          "oldStart": 94,
          "oldLines": 15,
          "newStart": 95,
          "newLines": 10,
          "lines": [
            " ",
            "       // Step 4: Test __run_hook mode for Stop",
            "       const stopInput = {",
            "-        reason: 'completed',",
            "-        stats: {",
            "-          input_tokens: 100,",
            "-          output_tokens: 50,",
            "-          total_tokens: 150,",
            "-          input_cached_tokens: 0,",
            "-          output_cached_tokens: 0,",
            "-          total_cached_tokens: 0",
            "-        }",
            "+        hook_event_name: 'Stop',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "+        stop_hook_active: true",
            "       };",
            " ",
            "       const stopResult = execSync("
          ]
        },
        {
          "oldStart": 115,
          "oldLines": 10,
          "newStart": 111,
          "newLines": 10,
          "lines": [
            "       );",
            " ",
            "       expect(stopResult).toContain('Stop:');",
            "-      expect(stopResult).toContain('\"reason\":\"completed\"');",
            "+      expect(stopResult).toContain('\"stop_hook_active\":true');",
            "     });",
            " ",
            "-    it('should handle PreToolUse skip results correctly', () => {",
            "+    it('should handle PreToolUse block results correctly', () => {",
            "       const hooksContent = `",
            " import { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';",
            " "
          ]
        },
        {
          "oldStart": 127,
          "oldLines": 10,
          "newStart": 123,
          "newLines": 10,
          "lines": [
            "     {",
            "       matcher: 'Bash',",
            "       handler: async (input) => {",
            "-        if (input.input_json.command?.includes('rm')) {",
            "-          return { skip: true, message: 'Dangerous command blocked' };",
            "+        if (input.tool_input.command?.includes('rm')) {",
            "+          return { decision: 'block', reason: 'Dangerous command blocked' };",
            "         }",
            "-        return { skip: false };",
            "+        return { decision: 'approve' };",
            "       }",
            "     }",
            "   ]"
          ]
        },
        {
          "oldStart": 141,
          "oldLines": 8,
          "newStart": 137,
          "newLines": 11,
          "lines": [
            " ",
            "       // Test with dangerous command",
            "       const dangerousInput = {",
            "+        hook_event_name: 'PreToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Bash',",
            "-        input_json: { command: 'rm -rf /' }",
            "+        tool_input: { command: 'rm -rf /' }",
            "       };",
            " ",
            "       const skipResult = execSync("
          ]
        },
        {
          "oldStart": 156,
          "oldLines": 14,
          "newStart": 155,
          "newLines": 17,
          "lines": [
            " ",
            "       const skipOutput = JSON.parse(skipResult);",
            "       expect(skipOutput).toEqual({",
            "-        skip: true,",
            "-        message: 'Dangerous command blocked'",
            "+        decision: 'block',",
            "+        reason: 'Dangerous command blocked'",
            "       });",
            " ",
            "       // Test with safe command",
            "       const safeInput = {",
            "+        hook_event_name: 'PreToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Bash',",
            "-        input_json: { command: 'echo \"safe\"' }",
            "+        tool_input: { command: 'echo \"safe\"' }",
            "       };",
            " ",
            "       const allowResult = execSync("
          ]
        },
        {
          "oldStart": 181,
          "oldLines": 14,
          "newStart": 183,
          "newLines": 16,
          "lines": [
            "     it('should handle logging hooks integration', () => {",
            "       const hooksContent = `",
            " import { defineHooks } from '${path.resolve(originalCwd, 'src/index')}';",
            "-import { logToolUseEvents } from '${path.resolve(originalCwd, 'src/hooks/logToolUseEvents')}';",
            "+import { logPreToolUseEvents, logPostToolUseEvents } from '${path.resolve(originalCwd, 'src/hooks/logToolUseEvents')}';",
            " import { logStopEvents } from '${path.resolve(originalCwd, 'src/hooks/logStopEvents')}';",
            " ",
            "-const toolLogger = logToolUseEvents('./tool-events.json', 10);",
            "+const preToolLogger = logPreToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });",
            "+const postToolLogger = logPostToolUseEvents({ logFileName: './tool-events.json', maxEventsStored: 10 });",
            " const stopLogger = logStopEvents('./stop-events.json', 5);",
            " ",
            " export default defineHooks({",
            "-  ...toolLogger,",
            "+  PreToolUse: [preToolLogger],",
            "+  PostToolUse: [postToolLogger],",
            "   Stop: stopLogger",
            " });",
            " `;"
          ]
        },
        {
          "oldStart": 197,
          "oldLines": 8,
          "newStart": 201,
          "newLines": 11,
          "lines": [
            " ",
            "       // Execute PreToolUse",
            "       const preToolInput = {",
            "+        hook_event_name: 'PreToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Write',",
            "-        input_json: { file_path: 'test.txt', content: 'hello' }",
            "+        tool_input: { file_path: 'test.txt', content: 'hello' }",
            "       };",
            " ",
            "       execSync("
          ]
        },
        {
          "oldStart": 212,
          "oldLines": 11,
          "newStart": 219,
          "newLines": 12,
          "lines": [
            " ",
            "       // Execute PostToolUse",
            "       const postToolInput = {",
            "+        hook_event_name: 'PostToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Write',",
            "-        input_json: { file_path: 'test.txt', content: 'hello' },",
            "-        output: 'File written successfully',",
            "-        error: null,",
            "-        duration_ms: 50",
            "+        tool_input: { file_path: 'test.txt', content: 'hello' },",
            "+        tool_response: { output: 'File written successfully' }",
            "       };",
            " ",
            "       execSync("
          ]
        },
        {
          "oldStart": 230,
          "oldLines": 15,
          "newStart": 238,
          "newLines": 10,
          "lines": [
            " ",
            "       // Execute Stop",
            "       const stopInput = {",
            "-        reason: 'completed',",
            "-        stats: {",
            "-          input_tokens: 100,",
            "-          output_tokens: 50,",
            "-          total_tokens: 150,",
            "-          input_cached_tokens: 0,",
            "-          output_cached_tokens: 0,",
            "-          total_cached_tokens: 0",
            "-        }",
            "+        hook_event_name: 'Stop',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "+        stop_hook_active: true",
            "       };",
            " ",
            "       execSync("
          ]
        },
        {
          "oldStart": 253,
          "oldLines": 8,
          "newStart": 256,
          "newLines": 8,
          "lines": [
            "       // Verify log files were created",
            "       const toolLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'tool-events.json'), 'utf8'));",
            "       expect(toolLog).toHaveLength(2);",
            "-      expect(toolLog[0].type).toBe('PreToolUse');",
            "-      expect(toolLog[1].type).toBe('PostToolUse');",
            "+      expect(toolLog[0].event).toBe('PreToolUse');",
            "+      expect(toolLog[1].event).toBe('PostToolUse');",
            " ",
            "       const stopLog = JSON.parse(fs.readFileSync(path.join(tempDir, 'stop-events.json'), 'utf8'));",
            "       expect(stopLog).toHaveLength(1);"
          ]
        },
        {
          "oldStart": 280,
          "oldLines": 8,
          "newStart": 283,
          "newLines": 11,
          "lines": [
            "       fs.writeFileSync(path.join(tempDir, '.claude/hooks/hooks.ts'), hooksContent);",
            " ",
            "       const input = {",
            "+        hook_event_name: 'PreToolUse',",
            "+        session_id: 'test-session',",
            "+        transcript_path: '/tmp/transcript.json',",
            "         tool_name: 'Bash',",
            "-        input_json: { command: 'echo \"test\"' }",
            "+        tool_input: { command: 'echo \"test\"' }",
            "       };",
            " ",
            "       // Should exit with error code 1"
          ]
        },
        {
          "oldStart": 307,
          "oldLines": 8,
          "newStart": 313,
          "newLines": 8,
          "lines": [
            " ",
            " export default defineHooks({",
            "   PreToolUse: [",
            "-    { matcher: 'Bash', handler: async () => ({ skip: false }) },",
            "-    { matcher: 'Write', handler: async () => ({ skip: false }) }",
            "+    { matcher: 'Bash', handler: async () => ({ decision: 'approve' }) },",
            "+    { matcher: 'Write', handler: async () => ({ decision: 'approve' }) }",
            "   ],",
            "   Stop: async () => ({})",
            " });"
          ]
        },
        {
          "oldStart": 363,
          "oldLines": 7,
          "newStart": 369,
          "newLines": 7,
          "lines": [
            " ",
            " export default defineHooks({",
            "   PreToolUse: [",
            "-    { matcher: 'NewHook', handler: async () => ({ skip: false }) }",
            "+    { matcher: 'NewHook', handler: async () => ({ decision: 'approve' }) }",
            "   ]",
            " });",
            " `;"
          ]
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:36:58.180Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "rm .github/workflows/publish.yml",
      "description": "Remove old publish.yml workflow"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:58.198Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "rm .github/workflows/publish.yml",
      "description": "Remove old publish.yml workflow"
    }
  },
  {
    "timestamp": "2025-07-08T01:36:58.217Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "rm .github/workflows/publish.yml",
      "description": "Remove old publish.yml workflow"
    }
  },
  {
    "timestamp": "2025-07-08T01:37:03.599Z",
    "event": "PostToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "rm .github/workflows/publish.yml",
      "description": "Remove old publish.yml workflow"
    },
    "toolResponse": {
      "stdout": "",
      "stderr": "",
      "interrupted": false,
      "isImage": false
    }
  },
  {
    "timestamp": "2025-07-08T01:37:03.807Z",
    "event": "PreToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Install Vitest and testing dependencies",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Configure Vitest with TypeScript support",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create test directory structure",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Write unit tests for src/index.ts",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Write unit tests for src/cli.ts",
          "status": "completed",
          "priority": "high",
          "id": "5"
        },
        {
          "content": "Write unit tests for src/hooks utilities",
          "status": "completed",
          "priority": "medium",
          "id": "6"
        },
        {
          "content": "Create test utilities and mocks",
          "status": "completed",
          "priority": "medium",
          "id": "7"
        },
        {
          "content": "Add integration tests",
          "status": "completed",
          "priority": "medium",
          "id": "8"
        },
        {
          "content": "Configure test coverage reporting",
          "status": "completed",
          "priority": "low",
          "id": "9"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:37:04.530Z",
    "event": "PostToolUse",
    "sessionId": "772f92e1-aa95-4cea-a946-663a1bd59a8a",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/772f92e1-aa95-4cea-a946-663a1bd59a8a.jsonl",
    "toolName": "TodoWrite",
    "toolInput": {
      "todos": [
        {
          "content": "Install Vitest and testing dependencies",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Configure Vitest with TypeScript support",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create test directory structure",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Write unit tests for src/index.ts",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Write unit tests for src/cli.ts",
          "status": "completed",
          "priority": "high",
          "id": "5"
        },
        {
          "content": "Write unit tests for src/hooks utilities",
          "status": "completed",
          "priority": "medium",
          "id": "6"
        },
        {
          "content": "Create test utilities and mocks",
          "status": "completed",
          "priority": "medium",
          "id": "7"
        },
        {
          "content": "Add integration tests",
          "status": "completed",
          "priority": "medium",
          "id": "8"
        },
        {
          "content": "Configure test coverage reporting",
          "status": "completed",
          "priority": "low",
          "id": "9"
        }
      ]
    },
    "toolResponse": {
      "oldTodos": [
        {
          "content": "Install Vitest and testing dependencies",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Configure Vitest with TypeScript support",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create test directory structure",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Write unit tests for src/index.ts",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Write unit tests for src/cli.ts",
          "status": "completed",
          "priority": "high",
          "id": "5"
        },
        {
          "content": "Write unit tests for src/hooks utilities",
          "status": "completed",
          "priority": "medium",
          "id": "6"
        },
        {
          "content": "Create test utilities and mocks",
          "status": "completed",
          "priority": "medium",
          "id": "7"
        },
        {
          "content": "Add integration tests",
          "status": "completed",
          "priority": "medium",
          "id": "8"
        },
        {
          "content": "Configure test coverage reporting",
          "status": "in_progress",
          "priority": "low",
          "id": "9"
        }
      ],
      "newTodos": [
        {
          "content": "Install Vitest and testing dependencies",
          "status": "completed",
          "priority": "high",
          "id": "1"
        },
        {
          "content": "Configure Vitest with TypeScript support",
          "status": "completed",
          "priority": "high",
          "id": "2"
        },
        {
          "content": "Create test directory structure",
          "status": "completed",
          "priority": "high",
          "id": "3"
        },
        {
          "content": "Write unit tests for src/index.ts",
          "status": "completed",
          "priority": "high",
          "id": "4"
        },
        {
          "content": "Write unit tests for src/cli.ts",
          "status": "completed",
          "priority": "high",
          "id": "5"
        },
        {
          "content": "Write unit tests for src/hooks utilities",
          "status": "completed",
          "priority": "medium",
          "id": "6"
        },
        {
          "content": "Create test utilities and mocks",
          "status": "completed",
          "priority": "medium",
          "id": "7"
        },
        {
          "content": "Add integration tests",
          "status": "completed",
          "priority": "medium",
          "id": "8"
        },
        {
          "content": "Configure test coverage reporting",
          "status": "completed",
          "priority": "low",
          "id": "9"
        }
      ]
    }
  },
  {
    "timestamp": "2025-07-08T01:37:07.770Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "git add -A",
      "description": "Stage removal of publish.yml"
    }
  },
  {
    "timestamp": "2025-07-08T01:37:07.793Z",
    "event": "PreToolUse",
    "sessionId": "4506d7aa-7308-4258-9f72-76b975aac879",
    "transcriptPath": "/Users/tim/.claude/projects/-Users-tim-repos-define-claude-code-hooks/4506d7aa-7308-4258-9f72-76b975aac879.jsonl",
    "toolName": "Bash",
    "toolInput": {
      "command": "git add -A",
      "description": "Stage removal of publish.yml"
    }
  }
]